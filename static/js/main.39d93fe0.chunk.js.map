{"version":3,"sources":["constants.js","utils/cell.js","utils/grid.js","contexts/Game.js","components/Cell.style.js","components/Cell.js","components/Row.style.js","components/Row.js","components/Grid.style.js","components/Grid.js","components/common/Checkbox.js","components/common/Button.style.js","components/common/Button.js","components/Menu.style.js","components/Menu.js","components/Information.style.js","components/Information.js","components/App.style.js","components/App.js","index.js"],"names":["columnsQuantity","BEGINNER","INTERMEDIATE","EXPERT","rowsQuantity","gameStatus","READY","PLAYING","GAME_OVER","VICTORY","bombsQuantity","hasUpperRow","cell","row","hasLowerRow","rows","hasLeftColumn","column","hasRightColumn","columns","shouldStartTimer","status","cells","length","hasBomb","calculateBombsRemaining","bombs","flag","generateGrid","Object","toConsumableArray","Array","reduce","acc","_","index","id","parseInt","concat","Math","floor","hasFlag","dangerLevel","isHovered","isVisible","neighbors","generateBombs","grid","cleanCorners","ids","Set","size","getRandomId","add","map","has","objectSpread","explode","random","value","total","blockedIds","validId","randomId","includes","includeNeighborInformation","push","generateDanger","calculateDangerLevel","neighbor","isVictory","filter","GameContext","React","createContext","GameProvider","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","bombsRemaining","cheat","hover","navigateUsingArrow","selectedLevel","time","timer","componentDidMount","startGrid","notPutBombsOnCorners","initialGrid","gridUtils","gridWithBombs","gridWithNeighborInformation","gridWithDangerLevel","setState","restartGame","event","detail","stopTimer","changeLevel","cellClicked","clickedCells","_this$state","newGrid","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","changeCellToVisible","clickedOnBomb","err","return","cellUtils","startTimer","forEach","clickedCell","updateGrid","toggleFlag","preventDefault","newFlagStatus","idToUpdate","newValues","setHover","asyncToGenerator","regenerator_default","a","mark","_callee","_this$state2","cellTopLeft","cellTopRight","cellBottomLeft","cellBottomRight","wrap","_context","prev","stop","toggleCheatHover","changeNavigation","action","activeCell","newNavigateUsingArrow","setInterval","clearInterval","render","react_default","createElement","Provider","isGameOver","props","children","inherits","Component","commonCell","alignItems","backgroundColor","cursor","display","fontWeight","height","justifyContent","maxHeight","maxWidth","position","userSelect","width","Cell_style","css","borderTop","borderLeft","borderBottom","borderRight",":hover","cellOver","cellVisible","cellHovered","cellExploded","cellFlag","cellNavigation","emoji","color","fontSize","colors","styleIsFilled","styles","styleIsHovered","styleIsActiveNavigation","renderValue","Cell","_ref","_useContext","useContext","className","style","onClick","bind","onContextMenu","onMouseEnter","onMouseLeave","Row_style","Row","components_Cell","key","Grid_style","borderCollapse","keys","ArrowDown","ArrowUp","ArrowLeft","ArrowRight","Enter","f","r","c","renderGrid","keyGetter","grouped","item","html","_arr","entries","_i","_ref4","_ref3","slicedToArray","components_Row","Grid","down","allowedKey","useEffect","window","addEventListener","removeEventListener","Checkbox","checked","label","onChange","type","Button_style","button","border","borderRadius","padding",":focus","outline","Button","assign","Menu_style","menu","listStyle","marginBottom","listItem","marginRight","listItemActive","levelText","ListItem","level","Menu","Menu_ListItem","Information_style","container","wrapper","info","victory","marginTop","cheatArea","> h1","hints","lineHeight","Information","components_Menu","common_Button","components_common_Checkbox","App_style","app","App","Game_GameProvider","components_Information","components_Grid","ReactDOM","components_App","document","getElementById"],"mappings":"0RAAaA,EAAkB,CAC7BC,SAAU,EACVC,aAAc,GACdC,OAAQ,IAGGC,EAAe,CAC1BH,SAAU,EACVC,aAAc,GACdC,OAAQ,IAGGE,EAAa,CACxBC,MAAO,EACPC,QAAS,EACTC,UAAW,EACXC,QAAS,GAGEC,EAAgB,CAC3BT,SAAU,GACVC,aAAc,GACdC,OAAQ,ICpBGQ,EAAc,SAAAC,GACzB,OAAOA,EAAKC,IAAM,GAAK,GAGZC,EAAc,SAACF,EAAMG,GAChC,OAAOH,EAAKC,IAAM,EAAIE,GAGXC,EAAgB,SAAAJ,GAC3B,OAAOA,EAAKK,OAAS,GAAK,GAGfC,EAAiB,SAACN,EAAMO,GACnC,OAAOP,EAAKK,OAAS,EAAIE,GAGdC,EAAmB,SAACC,EAAQC,GACvC,OAAID,IAAWhB,EAAWC,QACtBgB,EAAMC,OAAS,IACdD,EAAM,GAAGE,UAKHC,EAA0B,SAACC,EAAOC,GAC7C,OAAOA,EAAOD,EAAQ,EAAIA,EAAQ,UCzBvBE,EAAe,SAACb,EAAMI,GACjC,IAAMG,EAAQP,EAAOI,EAErB,OAAOU,OAAAC,EAAA,EAAAD,CAAIE,MAAMT,IAAQU,OAAO,SAACC,EAAKC,EAAGC,GACvC,IAAMC,EAAKC,SAASF,EAAO,IAE3B,SAAAG,OAAAT,OAAAC,EAAA,EAAAD,CACKI,GADL,CAEE,CACEG,KACAvB,IAAK0B,KAAKC,MAAMJ,EAAKjB,GACrBF,OAAQmB,EAAKjB,EACbK,SAAS,EACTiB,SAAS,EACTC,YAAa,EACbC,WAAW,EACXC,WAAW,EACXC,UAAW,OAGd,KAGQC,EAAgB,SAACC,EAAMhC,EAAMI,EAASO,EAAOsB,GAGxD,IAFA,IAAMC,EAAM,IAAIC,IAETD,EAAIE,KAAOzB,GAAO,CACvB,IAAMU,EAAKgB,EAAYL,EAAMhC,EAAMI,EAAS6B,GAC5CC,EAAII,IAAIjB,GAGV,OAAOW,EAAKO,IAAI,SAAA1C,GACd,OAAIqC,EAAIM,IAAI3C,EAAKwB,IACRP,OAAA2B,EAAA,EAAA3B,CAAA,GACFjB,EADL,CAEEY,SAAS,EACTiC,SAAS,IAGN7C,KAIL8C,EAAS,SAAAC,GAAK,OAAIpB,KAAKC,MAAMD,KAAKmB,SAAWC,IAE7CP,EAAc,SAACL,EAAMhC,EAAMI,EAAS6B,GACxC,IAAMY,EAAQ7C,EAAOI,EAErB,IAAK6B,EAAc,OAAOU,EAAOE,GAUjC,IARA,IAAMC,EAAa,CACjBd,EAAK,GAAGX,GACRW,EAAK5B,EAAU,GAAGiB,GAClBW,GAAMhC,EAAO,GAAKI,GAASiB,GAC3BW,EAAKA,EAAKxB,OAAS,GAAGa,IAGpB0B,EAAU,MACNA,GAAS,CACf,IAAMC,EAAWL,EAAOE,GACnBC,EAAWG,SAASD,KACvBD,EAAUC,GAGd,OAAOD,GAGIG,EAA6B,SAAClB,EAAMhC,EAAMI,GACrD,OAAO4B,EAAKO,IAAI,SAAA1C,GACd,IAAMiC,EAAYjC,EAAKiC,UAgCvB,OA/BIlC,EAAYC,IAASI,EAAcJ,IACrCiC,EAAUqB,KAAKtD,EAAKwB,GAAKjB,EAAU,GAEjCR,EAAYC,IACdiC,EAAUqB,KAAKtD,EAAKwB,GAAKjB,GAGvBR,EAAYC,IAASM,EAAeN,EAAMO,IAC5C0B,EAAUqB,KAAKtD,EAAKwB,GAAKjB,EAAU,GAGjCH,EAAcJ,IAChBiC,EAAUqB,KAAKtD,EAAKwB,GAAK,GAGvBlB,EAAeN,EAAMO,IACvB0B,EAAUqB,KAAKtD,EAAKwB,GAAK,GAGvBtB,EAAYF,EAAMG,IAASC,EAAcJ,IAC3CiC,EAAUqB,KAAKtD,EAAKwB,GAAKjB,EAAU,GAGjCL,EAAYF,EAAMG,IACpB8B,EAAUqB,KAAKtD,EAAKwB,GAAKjB,GAGvBL,EAAYF,EAAMG,IAASG,EAAeN,EAAMO,IAClD0B,EAAUqB,KAAKtD,EAAKwB,GAAKjB,EAAU,GAG9BU,OAAA2B,EAAA,EAAA3B,CAAA,GACFjB,EADL,CAEEiC,iBAKOsB,EAAiB,SAAApB,GAC5B,OAAOA,EAAKO,IAAI,SAAA1C,GAAI,OAAAiB,OAAA2B,EAAA,EAAA3B,CAAA,GACfjB,EADe,CAElB8B,YAAa0B,EAAqBrB,EAAMnC,QAI/BwD,EAAuB,SAACrB,EAAMnC,GAGzC,OAFkBA,EAAKiC,UAENb,OAAO,SAACU,EAAa2B,GACpC,OAAOtB,EAAKsB,GAAU7C,QAAUkB,EAAc,EAAIA,GACjD,IAGQ4B,EAAY,SAACvB,EAAMrC,GAE9B,OADqBqC,EAAKwB,OAAO,SAAA3D,GAAI,OAAIA,EAAKgC,YAAWrB,OACnCb,IAAkBqC,EAAKxB,QCpHzCiD,EAAcC,IAAMC,gBAEbC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAjD,OAAAkD,EAAA,EAAAlD,CAAAmD,KAAAL,GAAA,QAAAM,EAAAC,UAAA3D,OAAA4D,EAAA,IAAApD,MAAAkD,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAD,EAAAC,GAAAF,UAAAE,GAAA,OAAAN,EAAAjD,OAAAwD,EAAA,EAAAxD,CAAAmD,MAAAH,EAAAhD,OAAAyD,EAAA,EAAAzD,CAAA8C,IAAAY,KAAAC,MAAAX,EAAA,CAAAG,MAAA1C,OAAA6C,MACEM,MAAQ,CACNC,eAAgB,GAChBC,MAAO,CACL3C,cAAc,EACd4C,OAAO,GAET7C,KAAM,GACN8C,mBAAoB,EACpBxE,OAAQhB,EAAWC,MACnBwF,cAAe,WACfC,KAAM,GAXVjB,EAcEkB,MAAQ,aAdVlB,EAgBEmB,kBAAoB,kBAAMnB,EAAKoB,aAhBjCpB,EAkBEoB,UAAY,WAAM,IACRJ,EAAkBhB,EAAKW,MAAvBK,cAEFpE,EAAQhB,EAAcoF,GACtB/E,EAAOX,EAAa0F,GACpB3E,EAAUnB,EAAgB8F,GAC1BK,EAAuBrB,EAAKW,MAAME,MAAM3C,aAExCoD,EAAcC,EAAuBtF,EAAMI,GAC3CmF,EAAgBD,EACpBD,EACArF,EACAI,EACAO,EACAyE,GAEII,EAA8BF,EAClCC,EACAvF,EACAI,GAEIqF,EAAsBH,EAC1BE,GAEFzB,EAAK2B,SAAS,CAAE1D,KAAMyD,KA1C1B1B,EA6CE4B,YAAc,SAAAC,GAERA,GAA0B,IAAjBA,EAAMC,SAEnB9B,EAAK+B,YAEL/B,EAAK2B,SAAS,CACZf,eAAgBhF,EAAcoE,EAAKW,MAAMK,eACzCH,MAAM9D,OAAA2B,EAAA,EAAA3B,CAAA,GACDiD,EAAKW,MAAME,MADX,CAEH3C,cAAc,IAEhB6C,mBAAoB,EACpBxE,OAAQhB,EAAWC,MACnByF,KAAM,IAERjB,EAAKoB,cA7DTpB,EAgEEgC,YAAc,SAAAhB,GACZhB,EAAK2B,SAAS,CAAEX,iBAAiBhB,EAAK4B,cAjE1C5B,EAoEEiC,YAAc,SAAAC,GAAgB,IAAAC,EACMnC,EAAKW,MAA/BK,EADoBmB,EACpBnB,cAAezE,EADK4F,EACL5F,OACvB,GAAIA,IAAWhB,EAAWC,OAASe,IAAWhB,EAAWE,QAAzD,CAEA,IAAI2G,EACExF,EAAQhB,EAAcoF,GALAqB,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAO5B,QAAAC,EAAAC,EAAmBR,EAAnBS,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAiC,KAAtBvG,EAAsB2G,EAAA5D,MAC/B,GAAI/C,EAAKgC,UAAW,OACpB,GAAIhC,EAAK6B,QAAS,OAClByE,EAAUpC,EAAK+C,oBAAoB/C,EAAKW,MAAM1C,KAAMnC,GAEhDA,EAAKY,SACPsD,EAAK2B,SAAS,CAAEpF,OAAQhB,EAAWG,YACnC0G,EAAUpC,EAAKgD,cAAcZ,EAAStG,IAC7ByF,EAAoBa,EAASxF,KACtCoD,EAAK+B,YACL/B,EAAK2B,SAAS,CAAEpF,OAAQhB,EAAWI,YAjBX,MAAAsH,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,GAqBxBY,EAA2B5G,EAAQ2F,IACrClC,EAAK2B,SAAS,CAAEpF,OAAQhB,EAAWE,SAAWuE,EAAKoD,YAGrDpD,EAAK2B,SAAS,CAAE1D,KAAMmE,MA7F1BpC,EAgGE+C,oBAAsB,SAAC9E,EAAMnC,GAU3B,OATAmC,EAAKnC,EAAKwB,IAAVP,OAAA2B,EAAA,EAAA3B,CAAA,GAAqBjB,EAArB,CAA2BgC,WAAW,IAGb,IAArBhC,EAAK8B,aAAsB9B,EAAKY,SAAYZ,EAAKgC,WACnDhC,EAAKiC,UAAUsF,QAAQ,SAAA9D,GACrBS,EAAK+C,oBAAoB9E,EAAMA,EAAKsB,MAIjCtB,GA1GX+B,EA6GEgD,cAAgB,SAAC/E,EAAMqF,GAQrB,OAPAtD,EAAK+B,YAEW/B,EAAKuD,WAAWtF,EAAMqF,EAAYhG,GAAI,CACpDQ,WAAW,EACXa,SAAS,IAGIH,IAAI,SAAA1C,GACjB,OAAIA,EAAKY,UAAYZ,EAAK6C,QACjB5B,OAAA2B,EAAA,EAAA3B,CAAA,GAAKjB,EAAZ,CAAkBgC,WAAW,IAExBhC,KAzHbkE,EA6HEwD,WAAa,SAACF,EAAazB,GAKzB,GAJIA,GACFA,EAAM4B,kBAGJH,EAAYxF,UAAhB,CAEA,IAAMhC,EAAOkE,EAAKW,MAAM1C,KAAKqF,EAAYhG,IACnCoG,GAAiB5H,EAAK6B,QACtByE,EAAUpC,EAAKuD,WAAWvD,EAAKW,MAAM1C,KAAMnC,EAAKwB,GAAI,CACxDK,QAAS+F,IAGX1D,EAAK2B,SAAS,CACZf,eAAgBuC,EACdnD,EAAKW,MAAMC,eACX8C,GAEFzF,KAAMmE,MA/IZpC,EAmJEuD,WAAa,SAACtF,EAAM0F,EAAYC,GAC9B,OAAO3F,EAAKO,IAAI,SAAA1C,GACd,OAAIA,EAAKwB,KAAOqG,EAAmB7H,EAE5BiB,OAAA2B,EAAA,EAAA3B,CAAA,GACFjB,EACA8H,MAzJX5D,EA8JE6D,SAAW,SAAC/H,EAAM+B,GAChB,GAAKmC,EAAKW,MAAME,MAAMC,MAAtB,CAEA,IAAMsB,EAAUpC,EAAKuD,WAAWvD,EAAKW,MAAM1C,KAAMnC,EAAKwB,GAAI,CACxDO,cAGF/B,EAAKiC,UAAUsF,QAAQ,SAAA9D,GACrB6C,EAAQ7C,GAAU1B,UAAYA,IAGhCmC,EAAK2B,SAAS,CAAE1D,KAAMmE,MAzK1BpC,EA4KE9B,aAAe,SAAA2D,GAETA,GAA0B,IAAjBA,EAAMC,QAEnB9B,EAAK2B,SACH,CACEd,MAAM9D,OAAA2B,EAAA,EAAA3B,CAAA,GACDiD,EAAKW,MAAME,MADX,CAEH3C,cAAc,KAJpBnB,OAAA+G,EAAA,EAAA/G,CAAAgH,EAAAC,EAAAC,KAOE,SAAAC,IAAA,IAAAC,EAAAlG,EAAA+C,EAAA/E,EAAAI,EAAA+H,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,EAAAC,EAAAQ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAA5B,MAAA,cAAA4B,EAAA5B,KAAA,EACQ7C,EAAK4B,cADb,OAAAuC,EAGkCnE,EAAKW,MAA7B1C,EAHVkG,EAGUlG,KAAM+C,EAHhBmD,EAGgBnD,cACR/E,EAAOX,EAAa0F,GACpB3E,EAAUnB,EAAgB8F,GAE1BoD,EAAcnG,EAAK,GACnBoG,EAAepG,EAAK5B,EAAU,GAC9BiI,EAAiBrG,GAAMhC,EAAO,GAAKI,GACnCkI,EAAkBtG,EAAKA,EAAKxB,OAAS,GAE3CuD,EAAKiC,YAAY,CACfmC,EACAC,EACAC,EACAC,IAhBJ,yBAAAE,EAAAE,SAAAT,QAvLNlE,EA6ME4E,iBAAmB,WAAM,IACf/D,EAAUb,EAAKW,MAAfE,MACRb,EAAK2B,SAAS,CACZd,MAAM9D,OAAA2B,EAAA,EAAA3B,CAAA,GACD8D,EADA,CAEHC,OAAQD,EAAMC,WAlNtBd,EAuNE6E,iBAAmB,SAAAC,GACjB,IAAMxH,EAAK0C,EAAKW,MAAMI,mBAEhBgE,EADU/E,EAAKW,MAAM1C,KACAX,GACnB0D,EAAkBhB,EAAKW,MAAvBK,cACF/E,EAAOX,EAAa0F,GACpB3E,EAAUnB,EAAgB8F,GAE5BgE,EAAwB1H,EAEb,SAAXwH,GAAqB3B,EAAsB4B,EAAY9I,GACzD+I,EAAwB1H,EAAKjB,EACT,OAAXyI,GAAmB3B,EAAsB4B,GAClDC,EAAwB1H,EAAKjB,EACT,SAAXyI,GAAqB3B,EAAwB4B,GACtDC,EAAwB1H,EAAK,EAElB,UAAXwH,GACA3B,EAAyB4B,EAAY1I,GAErC2I,EAAwB1H,EAAK,EACT,YAAXwH,EACT9E,EAAKiC,YAAY,CAAC8C,IACE,SAAXD,EACT9E,EAAKwD,WAAWuB,GACI,YAAXD,EACT9E,EAAK4B,cACe,UAAXkD,GACT9E,EAAK9B,eAEP8B,EAAK2B,SAAS,CAAEZ,mBAAoBiE,KArPxChF,EAwPEoD,WAAa,WACXpD,EAAKkB,MAAQ+D,YAAY,WACvBjF,EAAK2B,SAAS,CAAEV,KAAMjB,EAAKW,MAAMM,KAAO,KACvC,MA3PPjB,EA8PE+B,UAAY,WACVmD,cAAclF,EAAKkB,QA/PvBlB,EAkQEmF,OAAS,WACP,OACEC,EAAApB,EAAAqB,cAAC3F,EAAY4F,SAAb,CACEzG,MAAO,CACL+B,eAAgBZ,EAAKW,MAAMC,eAC3BoB,YAAahC,EAAKgC,YAClB6C,iBAAkB7E,EAAK6E,iBACvB5C,YAAajC,EAAKiC,YAClBpB,MAAOb,EAAKW,MAAME,MAClB3C,aAAc8B,EAAK9B,aACnBD,KAAM+B,EAAKW,MAAM1C,KACjBsH,WAAYvF,EAAKW,MAAMpE,SAAWhB,EAAWG,UAC7C8D,UAAWQ,EAAKW,MAAMpE,SAAWhB,EAAWI,QAC5CoF,mBAAoBf,EAAKW,MAAMI,mBAC/Ba,YAAa5B,EAAK4B,YAClBZ,cAAehB,EAAKW,MAAMK,cAC1BC,KAAMjB,EAAKW,MAAMM,KACjB2D,iBAAkB5E,EAAK4E,iBACvBpB,WAAYxD,EAAKwD,WACjBK,SAAU7D,EAAK6D,WAGhB7D,EAAKwF,MAAMC,WAxRpBzF,EAAA,OAAAjD,OAAA2I,EAAA,EAAA3I,CAAA8C,EAAAC,GAAAD,EAAA,CAAkCF,IAAMgG,WA8RzBjG,WCzSTkG,EAAa,CACjBC,WAAY,SACZC,gBAAiB,UACjBC,OAAQ,UACRC,QAAS,OACTC,WAAY,OACZC,OAAQ,OACRC,eAAgB,SAChBC,UAAW,OACXC,SAAU,OACVC,SAAU,WACVC,WAAY,OACZC,MAAO,QAGMC,EAAA,CACb3K,KAAM4K,cAAI3J,OAAA2B,EAAA,EAAA3B,CAAA,GACL6I,EADI,CAEPe,UAAW,oBACXC,WAAY,oBACZC,aAAc,oBACdC,YAAa,oBACbC,SAAU,CACRjB,gBAAiB,cAGrBkB,SAAUN,cAAI3J,OAAA2B,EAAA,EAAA3B,CAAA,GACT6I,EADQ,CAEXe,UAAW,oBACXC,WAAY,oBACZC,aAAc,oBACdC,YAAa,uBAEfG,YAAaP,cAAI3J,OAAA2B,EAAA,EAAA3B,CAAA,GACZ6I,EADW,CAEdE,gBAAiB,UACjBa,UAAW,oBACXC,WAAY,oBACZC,aAAc,oBACdC,YAAa,uBAEfI,YAAaR,cAAI,CACfZ,gBAAiB,YAEnBqB,aAAcT,cAAI3J,OAAA2B,EAAA,EAAA3B,CAAA,GACb6I,EADY,CAEfE,gBAAiB,UACjBa,UAAW,oBACXC,WAAY,oBACZC,aAAc,oBACdC,YAAa,uBAEfM,SAAUV,cAAI3J,OAAA2B,EAAA,EAAA3B,CAAA,GACT6I,EADQ,CAEXe,UAAW,oBACXC,WAAY,oBACZC,aAAc,oBACdC,YAAa,uBAEfO,eAAgBX,cAAI,CAClBZ,gBAAiB,QACjBe,aAAc,oBACdC,YAAa,sBAEfQ,MAAOZ,cAAI,CACTa,MAAO,MACPC,SAAU,OACVtB,OAAQ,WAEVrH,MAAO6H,cAAI,CACTc,SAAU,UCjERC,EAAS,CACb,GACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WA+BIC,EAAgB,SAAC5L,EAAMyJ,GAC3B,OAAIzJ,EAAK6B,QAAgBgK,EAAOP,SAC5BtL,EAAKgC,WAAahC,EAAK6C,QAAgBgJ,EAAOR,aAC9CrL,EAAKgC,UAAkB6J,EAAOV,YAC3B1B,EAAaoC,EAAOX,SAAWW,EAAO7L,MAGzC8L,EAAiB,SAAA9L,GACrB,GAAIA,EAAK+B,UAAW,OAAO8J,EAAOT,aAG9BW,EAA0B,SAAC/L,EAAMwB,GACrC,GAAIxB,EAAKwB,KAAOA,EAAI,OAAOqK,EAAON,gBAG9BS,EAAc,SAAAhM,GAClB,OAAIA,EAAK6B,QAAgB,eACpB7B,EAAKgC,UACNhC,EAAKY,QAAgB,eACrBZ,EAAK8B,YAAc,EAAU9B,EAAK8B,YAC/B,GAHqB,IAUfmK,EAvDF,SAAAC,GAAc,IAAXlM,EAAWkM,EAAXlM,KAAWmM,EAOrBC,qBAAWxI,GALb6F,EAFuB0C,EAEvB1C,WACAtD,EAHuBgG,EAGvBhG,YACAlB,EAJuBkH,EAIvBlH,mBACAyC,EALuByE,EAKvBzE,WACAK,EANuBoE,EAMvBpE,SAEF,OACEuB,EAAApB,EAAAqB,cAAA,MACE8C,UAAS,GAAA3K,OAAKkK,EAAc5L,EAAMyJ,GAAzB,KAAA/H,OAAwCoK,EAC/C9L,GADO,KAAA0B,OAEJqK,EAAwB/L,EAAMiF,IACnCqH,MAAO,CAAEb,MAAOE,EAAO3L,EAAK8B,cAC5ByK,QAASpG,EAAYqG,YAAW,CAACxM,IACjCyM,cAAe/E,EAAW8E,YAAWxM,GACrC0M,aAAc3E,EAASyE,YAAWxM,GAAM,GACxC2M,aAAc5E,EAASyE,YAAWxM,GAAM,IAExCsJ,EAAApB,EAAAqB,cAAA,QACE8C,UAAWrM,EAAKY,SAAWZ,EAAK6B,QAAUgK,EAAOL,MAAQK,EAAO9I,OAE/DiJ,EAAYhM,MCvCN4M,EAAA,CACb3M,IAAK2K,cAAI,CACPV,QAAS,OACTG,eAAgB,YCcLwC,EAZH,SAAAX,GAAA,IAAGjM,EAAHiM,EAAGjM,IAAH,OACVqJ,EAAApB,EAAAqB,cAAA,MAAI8C,UAAWR,EAAO5L,KACnBA,EAAIyC,IAAI,SAAC1C,EAAMuB,GAAP,OACP+H,EAAApB,EAAAqB,cAACuD,EAAD,CAAMC,IAAG,QAAArL,OAAUH,GAASvB,KAAMA,QCRzBgN,EAAA,CACb7K,KAAMyI,cAAI,CACRqC,eAAgB,WAChBpC,UAAW,oBACXC,WAAY,oBACZC,aAAc,oBACdC,YAAa,oBACbZ,OAAQ,UCFN8C,EAAO,CACXC,UAAW,OACXC,QAAS,KACTC,UAAW,OACXC,WAAY,QACZC,MAAO,UACPrF,EAAG,UACHsF,EAAG,OACHC,EAAG,UACHC,EAAG,SAwCCC,EAAa,SAAAxL,GAGjB,IAFA,IAtCqByL,EAsCfC,GAtCeD,EAsCS,SAAAE,GAAI,OAAIA,EAAK7N,KAAnBkC,EArCPf,OAAO,SAACC,EAAKyM,GAC5B,IAAMf,EAAMa,EAAUE,GAMtB,OALIzM,EAAI0L,GACN1L,EAAI0L,GAAKzJ,KAAKwK,GAEdzM,EAAI0L,GAAO,CAACe,GAEPzM,GACN,KA8BC0M,EAAO,GAFcC,EAGA/M,OAAOgN,QAAQJ,GAAxCK,EAAA,EAAAA,EAAAF,EAAArN,OAAAuN,IAAkD,KAAAC,EAAAH,EAAAE,GAAAE,EAAAnN,OAAAoN,EAAA,EAAApN,CAAAkN,EAAA,GAAtCpB,EAAsCqB,EAAA,GAAjCnO,EAAiCmO,EAAA,GAChDL,EAAKzK,KAAKgG,EAAApB,EAAAqB,cAAC+E,EAAD,CAAKvB,IAAG,OAAArL,OAASqL,GAAO9M,IAAKA,KAEzC,OAAO8N,GAGMQ,EAjCF,WAAM,IAAApC,EACkBC,qBAAWxI,GAAtCmF,EADSoD,EACTpD,iBAAkB5G,EADTgK,EACShK,KAEpBqM,EAAO,SAAAtC,GAAa,IAAVa,EAAUb,EAAVa,IACR0B,EAAavB,EAAKH,GACpB0B,GACF1F,EAAiB0F,IAWrB,OAPAC,oBAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWJ,GAC5B,WACLG,OAAOE,oBAAoB,UAAWL,KAEvC,IAGDlF,EAAApB,EAAAqB,cAAA,SAAO8C,UAAWR,EAAO1J,MACvBmH,EAAApB,EAAAqB,cAAA,aAAQoE,EAAWxL,MCrCV2M,SAVE,SAAA5C,GAAkC,IAA/B6C,EAA+B7C,EAA/B6C,QAASC,EAAsB9C,EAAtB8C,MAAOC,EAAe/C,EAAf+C,SAClC,OACE3F,EAAApB,EAAAqB,cAAA,SAAO8C,UAAU,aACd2C,EACD1F,EAAApB,EAAAqB,cAAA,SAAO2F,KAAK,WAAWH,QAASA,EAASE,SAAUA,IACnD3F,EAAApB,EAAAqB,cAAA,QAAM8C,UAAU,iBCPP8C,GAAA,CACbC,OAAQxE,cAAI,CACVb,WAAY,SACZC,gBAAiB,UACjBqF,OAAQ,oBACRC,aAAc,MACd7D,MAAO,UACPxB,OAAQ,UACRC,QAAS,OACTwB,SAAU,OACVtB,OAAQ,OACRmF,QAAS,MACTtE,SAAU,CACRjB,gBAAiB,UACjByB,MAAO,WAET+D,SAAU,CACRC,QAAS,WCTAC,GANA,SAAAhG,GAAK,OAClBJ,EAAApB,EAAAqB,cAAA,SAAAtI,OAAA0O,OAAA,CAAQtD,UAAWR,GAAOuD,QAAY1F,GACnCA,EAAMC,WCJIiG,GAAA,CACbC,KAAMjF,cAAI,CACRV,QAAS,OACT4F,UAAW,OACXC,aAAc,SAEhBC,SAAUpF,cAAI,CACZG,aAAc,oBACdd,OAAQ,UACRgG,YAAa,OACbV,QAAS,WAEXW,eAAgBtF,cAAI,CAClBG,aAAc,uBCUZoF,GAAY,CAChB9Q,SAAU,WACVC,aAAc,eACdC,OAAQ,UAGJ6Q,GAAW,SAAAlE,GAAA,IAAGlD,EAAHkD,EAAGlD,OAAQqH,EAAXnE,EAAWmE,MAAOnL,EAAlBgH,EAAkBhH,cAAlB,OACfoE,EAAApB,EAAAqB,cAAA,KAAAtI,OAAA0O,OAAA,GACM/E,cACFiB,GAAOmE,SACPK,IAAUnL,EAAgB2G,GAAOqE,eAAiB,IAHtD,CAKE3D,QAASvD,EAAOwD,YAAW6D,KAE1BF,GAAUE,KAUAC,GAzCF,WAAM,IAAAnE,EACsBC,qBAAWxI,GAA1CsC,EADSiG,EACTjG,YAAahB,EADJiH,EACIjH,cAErB,OACEoE,EAAApB,EAAAqB,cAAA,MAAI8C,UAAWR,GAAOgE,MACnB,CAAC,WAAY,eAAgB,UAAUnN,IAAI,SAAA2N,GAAK,OAC/C/G,EAAApB,EAAAqB,cAACgH,GAAD,CACEvH,OAAQ9C,EACR6G,IAAKsD,EACLA,MAAOA,EACPnL,cAAeA,QChBVsL,GAAA,CACbC,UAAW7F,cAAI,CACbqF,YAAa,SAEfS,QAAS9F,cAAI,CACXmF,aAAc,SAEhBY,KAAM/F,cAAI,CACRa,MAAO,UACPC,SAAU,OACVvB,WAAY,SAEdiF,OAAQxE,cAAI,CACVZ,gBAAiB,UACjBqF,OAAQ,oBACRC,aAAc,MACd7D,MAAO,UACPxB,OAAQ,UACRyB,SAAU,OACVtB,OAAQ,OACRmF,QAAS,MACTtE,SAAU,CACRjB,gBAAiB,UACjByB,MAAO,WAET+D,SAAU,CACRC,QAAS,UAGbmB,QAAShG,cAAI,CACXa,MAAO,UACPC,SAAU,OACVvB,WAAY,OACZ0G,UAAW,SAEbC,UAAWlG,cAAI,CACbyE,OAAQ,oBACRwB,UAAW,OACXtB,QAAS,OACTwB,OAAQ,CACNtF,MAAO,UACPC,SAAU,OACVqE,aAAc,UAGlBiB,MAAOpG,cAAI,CACTqG,WAAY,OACZ1B,QAAS,UCsBE2B,GA9DK,WAAM,IAAA/E,EASpBC,qBAAWxI,GAPbkB,EAFsBqH,EAEtBrH,eACAC,EAHsBoH,EAGtBpH,MACA3C,EAJsB+J,EAItB/J,aACAsB,EALsByI,EAKtBzI,UACAoC,EANsBqG,EAMtBrG,YACAX,EAPsBgH,EAOtBhH,KACA2D,EARsBqD,EAQtBrD,iBAGF,OACEQ,EAAApB,EAAAqB,cAAA,OAAK8C,UAAWR,GAAO4E,WACrBnH,EAAApB,EAAAqB,cAAC4H,GAAD,MAEA7H,EAAApB,EAAAqB,cAAA,OAAK8C,UAAWR,GAAO6E,SACrBpH,EAAApB,EAAAqB,cAAA,OAAK8C,UAAWR,GAAO4E,WACrBnH,EAAApB,EAAAqB,cAAA,4BACmB,IACjBD,EAAApB,EAAAqB,cAAA,QAAM8C,UAAWR,GAAO8E,MAAO7L,IAEjCwE,EAAApB,EAAAqB,cAAA,kBACQD,EAAApB,EAAAqB,cAAA,QAAM8C,UAAWR,GAAO8E,MAAOxL,MAK3CmE,EAAApB,EAAAqB,cAAC6H,GAAD,CAAQ7E,QAASzG,GAAjB,WAEAwD,EAAApB,EAAAqB,cAAA,OAAK8C,UAAWR,GAAO+E,SAAUlN,EAAY,aAAe,IAE5D4F,EAAApB,EAAAqB,cAAA,OAAK8C,UAAWR,GAAOiF,WACrBxH,EAAApB,EAAAqB,cAAA,wBACAD,EAAApB,EAAAqB,cAAC8H,EAAD,CACEtC,QAAShK,EAAMC,MACfgK,MAAM,aACNC,SAAUnG,IAEZQ,EAAApB,EAAAqB,cAAC6H,GAAD,CAAQ7E,QAASnK,GAAjB,6BAGFkH,EAAApB,EAAAqB,cAAA,OAAK8C,UAAWR,GAAOmF,OACrB1H,EAAApB,EAAAqB,cAAA,SACED,EAAApB,EAAAqB,cAAA,4BADF,UAGAD,EAAApB,EAAAqB,cAAA,SACED,EAAApB,EAAAqB,cAAA,2BADF,gBAGAD,EAAApB,EAAAqB,cAAA,SACED,EAAApB,EAAAqB,cAAA,mBADF,iBAGAD,EAAApB,EAAAqB,cAAA,SACED,EAAApB,EAAAqB,cAAA,mBADF,aAGAD,EAAApB,EAAAqB,cAAA,SACED,EAAApB,EAAAqB,cAAA,mBADF,iCC7DO+H,GAAA,CACbC,IAAK3G,cAAI,CACPV,QAAS,OACTG,eAAgB,YCWLmH,GATH,kBACVlI,EAAApB,EAAAqB,cAAA,OAAK8C,UAAWR,GAAO0F,KACrBjI,EAAApB,EAAAqB,cAACkI,EAAD,KACEnI,EAAApB,EAAAqB,cAACmI,GAAD,MACApI,EAAApB,EAAAqB,cAACoI,EAAD,eCLNC,IAASvI,OAAOC,EAAApB,EAAAqB,cAACsI,GAAD,MAASC,SAASC,eAAe","file":"static/js/main.39d93fe0.chunk.js","sourcesContent":["export const columnsQuantity = {\n  BEGINNER: 9,\n  INTERMEDIATE: 16,\n  EXPERT: 30\n}\n\nexport const rowsQuantity = {\n  BEGINNER: 9,\n  INTERMEDIATE: 16,\n  EXPERT: 16\n}\n\nexport const gameStatus = {\n  READY: 0,\n  PLAYING: 1,\n  GAME_OVER: 2,\n  VICTORY: 3\n}\n\nexport const bombsQuantity = {\n  BEGINNER: 10,\n  INTERMEDIATE: 40,\n  EXPERT: 99\n}\n\nexport const cellsToDiscover = {\n  BEGINNER: 71,\n  INTERMEDIATE: 216,\n  EXPERT: 381\n}\n","import { gameStatus } from '../constants'\n\nexport const hasUpperRow = cell => {\n  return cell.row - 1 >= 0\n}\n\nexport const hasLowerRow = (cell, rows) => {\n  return cell.row + 1 < rows\n}\n\nexport const hasLeftColumn = cell => {\n  return cell.column - 1 >= 0\n}\n\nexport const hasRightColumn = (cell, columns) => {\n  return cell.column + 1 < columns\n}\n\nexport const shouldStartTimer = (status, cells) => {\n  if (status !== gameStatus.READY) return false\n  if (cells.length > 1) return true\n  if (!cells[0].hasBomb) return true\n\n  return false\n}\n\nexport const calculateBombsRemaining = (bombs, flag) => {\n  return flag ? bombs - 1 : bombs + 1\n}\n","import { hasLeftColumn, hasRightColumn, hasUpperRow, hasLowerRow } from './cell'\n\nexport const generateGrid = (rows, columns) => {\n  const cells = rows * columns\n\n  return [...Array(cells)].reduce((acc, _, index) => {\n    const id = parseInt(index, 10)\n\n    return [\n      ...acc,\n      {\n        id,\n        row: Math.floor(id / columns),\n        column: id % columns,\n        hasBomb: false,\n        hasFlag: false,\n        dangerLevel: 0,\n        isHovered: false,\n        isVisible: false,\n        neighbors: []\n      }\n    ]\n  }, [])\n}\n\nexport const generateBombs = (grid, rows, columns, bombs, cleanCorners) => {\n  const ids = new Set()\n\n  while (ids.size < bombs) {\n    const id = getRandomId(grid, rows, columns, cleanCorners)\n    ids.add(id)\n  }\n\n  return grid.map(cell => {\n    if (ids.has(cell.id))\n      return {\n        ...cell,\n        hasBomb: true,\n        explode: false\n      }\n\n    return cell\n  })\n}\n\nconst random = value => Math.floor(Math.random() * value)\n\nconst getRandomId = (grid, rows, columns, cleanCorners) => {\n  const total = rows * columns\n\n  if (!cleanCorners) return random(total)\n\n  const blockedIds = [\n    grid[0].id,\n    grid[columns - 1].id,\n    grid[(rows - 1) * columns].id,\n    grid[grid.length - 1].id\n  ]\n\n  let validId = null\n  while (!validId) {\n    const randomId = random(total)\n    if (!blockedIds.includes(randomId)) {\n      validId = randomId\n    }\n  }\n  return validId\n}\n\nexport const includeNeighborInformation = (grid, rows, columns) => {\n  return grid.map(cell => {\n    const neighbors = cell.neighbors\n    if (hasUpperRow(cell) && hasLeftColumn(cell))\n      neighbors.push(cell.id - columns - 1)\n\n    if (hasUpperRow(cell)) {\n      neighbors.push(cell.id - columns)\n    }\n\n    if (hasUpperRow(cell) && hasRightColumn(cell, columns)) {\n      neighbors.push(cell.id - columns + 1)\n    }\n\n    if (hasLeftColumn(cell)) {\n      neighbors.push(cell.id - 1)\n    }\n\n    if (hasRightColumn(cell, columns)) {\n      neighbors.push(cell.id + 1)\n    }\n\n    if (hasLowerRow(cell, rows) && hasLeftColumn(cell)) {\n      neighbors.push(cell.id + columns - 1)\n    }\n\n    if (hasLowerRow(cell, rows)) {\n      neighbors.push(cell.id + columns)\n    }\n\n    if (hasLowerRow(cell, rows) && hasRightColumn(cell, columns)) {\n      neighbors.push(cell.id + columns + 1)\n    }\n\n    return {\n      ...cell,\n      neighbors\n    }\n  })\n}\n\nexport const generateDanger = grid => {\n  return grid.map(cell => ({\n    ...cell,\n    dangerLevel: calculateDangerLevel(grid, cell)\n  }))\n}\n\nexport const calculateDangerLevel = (grid, cell) => {\n  const neighbors = cell.neighbors\n\n  return neighbors.reduce((dangerLevel, neighbor) => {\n    return grid[neighbor].hasBomb ? dangerLevel + 1 : dangerLevel\n  }, 0)\n}\n\nexport const isVictory = (grid, bombsQuantity) => {\n  const visibleCells = grid.filter(cell => cell.isVisible).length\n  return visibleCells + bombsQuantity === grid.length\n}\n","import React from 'react'\n\nimport * as cellUtils from '../utils/cell'\nimport * as gridUtils from '../utils/grid'\nimport {\n  bombsQuantity,\n  columnsQuantity,\n  gameStatus,\n  rowsQuantity\n} from '../constants'\n\nconst GameContext = React.createContext()\n\nexport class GameProvider extends React.Component {\n  state = {\n    bombsRemaining: 10,\n    cheat: {\n      cleanCorners: false,\n      hover: false\n    },\n    grid: [],\n    navigateUsingArrow: 0,\n    status: gameStatus.READY,\n    selectedLevel: 'BEGINNER',\n    time: 0\n  }\n\n  timer = () => {}\n\n  componentDidMount = () => this.startGrid()\n\n  startGrid = () => {\n    const { selectedLevel } = this.state\n\n    const bombs = bombsQuantity[selectedLevel]\n    const rows = rowsQuantity[selectedLevel]\n    const columns = columnsQuantity[selectedLevel]\n    const notPutBombsOnCorners = this.state.cheat.cleanCorners\n\n    const initialGrid = gridUtils.generateGrid(rows, columns)\n    const gridWithBombs = gridUtils.generateBombs(\n      initialGrid,\n      rows,\n      columns,\n      bombs,\n      notPutBombsOnCorners\n    )\n    const gridWithNeighborInformation = gridUtils.includeNeighborInformation(\n      gridWithBombs,\n      rows,\n      columns\n    )\n    const gridWithDangerLevel = gridUtils.generateDanger(\n      gridWithNeighborInformation\n    )\n    this.setState({ grid: gridWithDangerLevel })\n  }\n\n  restartGame = event => {\n    // Prevents the trigger using the \"enter\" key\n    if (event && event.detail === 0) return\n\n    this.stopTimer()\n\n    this.setState({\n      bombsRemaining: bombsQuantity[this.state.selectedLevel],\n      cheat: {\n        ...this.state.cheat,\n        cleanCorners: false\n      },\n      navigateUsingArrow: 0,\n      status: gameStatus.READY,\n      time: 0\n    })\n    this.startGrid()\n  }\n\n  changeLevel = selectedLevel => {\n    this.setState({ selectedLevel }, this.restartGame)\n  }\n\n  cellClicked = clickedCells => {\n    const { selectedLevel, status } = this.state\n    if (status !== gameStatus.READY && status !== gameStatus.PLAYING) return\n\n    let newGrid\n    const bombs = bombsQuantity[selectedLevel]\n\n    for (const cell of clickedCells) {\n      if (cell.isVisible) return\n      if (cell.hasFlag) return\n      newGrid = this.changeCellToVisible(this.state.grid, cell)\n\n      if (cell.hasBomb) {\n        this.setState({ status: gameStatus.GAME_OVER })\n        newGrid = this.clickedOnBomb(newGrid, cell)\n      } else if (gridUtils.isVictory(newGrid, bombs)) {\n        this.stopTimer()\n        this.setState({ status: gameStatus.VICTORY })\n      }\n    }\n\n    if (cellUtils.shouldStartTimer(status, clickedCells)) {\n      this.setState({ status: gameStatus.PLAYING }, this.startTimer)\n    }\n\n    this.setState({ grid: newGrid })\n  }\n\n  changeCellToVisible = (grid, cell) => {\n    grid[cell.id] = { ...cell, isVisible: true }\n\n    // Show all the cells without danger level related to this cell.\n    if (cell.dangerLevel === 0 && !cell.hasBomb && !cell.isVisible) {\n      cell.neighbors.forEach(neighbor => {\n        this.changeCellToVisible(grid, grid[neighbor])\n      })\n    }\n\n    return grid\n  }\n\n  clickedOnBomb = (grid, clickedCell) => {\n    this.stopTimer()\n\n    const newGrid = this.updateGrid(grid, clickedCell.id, {\n      isVisible: true,\n      explode: true\n    })\n\n    return newGrid.map(cell => {\n      if (cell.hasBomb && !cell.explode) {\n        return { ...cell, isVisible: true }\n      }\n      return cell\n    })\n  }\n\n  toggleFlag = (clickedCell, event) => {\n    if (event) {\n      event.preventDefault()\n    }\n\n    if (clickedCell.isVisible) return\n\n    const cell = this.state.grid[clickedCell.id]\n    const newFlagStatus = !cell.hasFlag\n    const newGrid = this.updateGrid(this.state.grid, cell.id, {\n      hasFlag: newFlagStatus\n    })\n\n    this.setState({\n      bombsRemaining: cellUtils.calculateBombsRemaining(\n        this.state.bombsRemaining,\n        newFlagStatus\n      ),\n      grid: newGrid\n    })\n  }\n\n  updateGrid = (grid, idToUpdate, newValues) => {\n    return grid.map(cell => {\n      if (cell.id !== idToUpdate) return cell\n\n      return {\n        ...cell,\n        ...newValues\n      }\n    })\n  }\n\n  setHover = (cell, isHovered) => {\n    if (!this.state.cheat.hover) return\n\n    const newGrid = this.updateGrid(this.state.grid, cell.id, {\n      isHovered\n    })\n\n    cell.neighbors.forEach(neighbor => {\n      newGrid[neighbor].isHovered = isHovered\n    })\n\n    this.setState({ grid: newGrid })\n  }\n\n  cleanCorners = event => {\n    // Prevents the trigger using the \"enter\" key\n    if (event && event.detail === 0) return\n\n    this.setState(\n      {\n        cheat: {\n          ...this.state.cheat,\n          cleanCorners: true\n        }\n      },\n      async () => {\n        await this.restartGame()\n\n        const { grid, selectedLevel } = this.state\n        const rows = rowsQuantity[selectedLevel]\n        const columns = columnsQuantity[selectedLevel]\n\n        const cellTopLeft = grid[0]\n        const cellTopRight = grid[columns - 1]\n        const cellBottomLeft = grid[(rows - 1) * columns]\n        const cellBottomRight = grid[grid.length - 1]\n\n        this.cellClicked([\n          cellTopLeft,\n          cellTopRight,\n          cellBottomLeft,\n          cellBottomRight\n        ])\n      }\n    )\n  }\n\n  toggleCheatHover = () => {\n    const { cheat } = this.state\n    this.setState({\n      cheat: {\n        ...cheat,\n        hover: !cheat.hover\n      }\n    })\n  }\n\n  changeNavigation = action => {\n    const id = this.state.navigateUsingArrow\n    const newGrid = this.state.grid\n    const activeCell = newGrid[id]\n    const { selectedLevel } = this.state\n    const rows = rowsQuantity[selectedLevel]\n    const columns = columnsQuantity[selectedLevel]\n\n    let newNavigateUsingArrow = id\n\n    if (action === 'down' && cellUtils.hasLowerRow(activeCell, rows)) {\n      newNavigateUsingArrow = id + columns\n    } else if (action === 'up' && cellUtils.hasUpperRow(activeCell)) {\n      newNavigateUsingArrow = id - columns\n    } else if (action === 'left' && cellUtils.hasLeftColumn(activeCell)) {\n      newNavigateUsingArrow = id - 1\n    } else if (\n      action === 'right' &&\n      cellUtils.hasRightColumn(activeCell, columns)\n    ) {\n      newNavigateUsingArrow = id + 1\n    } else if (action === 'trigger') {\n      this.cellClicked([activeCell])\n    } else if (action === 'flag') {\n      this.toggleFlag(activeCell)\n    } else if (action === 'restart') {\n      this.restartGame()\n    } else if (action === 'clean') {\n      this.cleanCorners()\n    }\n    this.setState({ navigateUsingArrow: newNavigateUsingArrow })\n  }\n\n  startTimer = () => {\n    this.timer = setInterval(() => {\n      this.setState({ time: this.state.time + 1 })\n    }, 1000)\n  }\n\n  stopTimer = () => {\n    clearInterval(this.timer)\n  }\n\n  render = () => {\n    return (\n      <GameContext.Provider\n        value={{\n          bombsRemaining: this.state.bombsRemaining,\n          changeLevel: this.changeLevel,\n          changeNavigation: this.changeNavigation,\n          cellClicked: this.cellClicked,\n          cheat: this.state.cheat,\n          cleanCorners: this.cleanCorners,\n          grid: this.state.grid,\n          isGameOver: this.state.status === gameStatus.GAME_OVER,\n          isVictory: this.state.status === gameStatus.VICTORY,\n          navigateUsingArrow: this.state.navigateUsingArrow,\n          restartGame: this.restartGame,\n          selectedLevel: this.state.selectedLevel,\n          time: this.state.time,\n          toggleCheatHover: this.toggleCheatHover,\n          toggleFlag: this.toggleFlag,\n          setHover: this.setHover\n        }}\n      >\n        {this.props.children}\n      </GameContext.Provider>\n    )\n  }\n}\n\nexport default GameContext\n","import { css } from 'glamor'\n\nconst commonCell = {\n  alignItems: 'center',\n  backgroundColor: '#DDDDDD',\n  cursor: 'pointer',\n  display: 'flex',\n  fontWeight: 'bold',\n  height: '2rem',\n  justifyContent: 'center',\n  maxHeight: '40px',\n  maxWidth: '40px',\n  position: 'relative',\n  userSelect: 'none',\n  width: '2rem'\n}\n\nexport default {\n  cell: css({\n    ...commonCell,\n    borderTop: '2px solid #EEEEEE',\n    borderLeft: '2px solid #EEEEEE',\n    borderBottom: '2px solid #555555',\n    borderRight: '2px solid #555555',\n    ':hover': {\n      backgroundColor: '#EEEEEE'\n    }\n  }),\n  cellOver: css({\n    ...commonCell,\n    borderTop: '2px solid #EEEEEE',\n    borderLeft: '2px solid #EEEEEE',\n    borderBottom: '2px solid #555555',\n    borderRight: '2px solid #555555'\n  }),\n  cellVisible: css({\n    ...commonCell,\n    backgroundColor: '#CCCCCC',\n    borderTop: '2px solid #555555',\n    borderLeft: '2px solid #555555',\n    borderBottom: '2px solid #CCCCCC',\n    borderRight: '2px solid #CCCCCC'\n  }),\n  cellHovered: css({\n    backgroundColor: '#90FC6F'\n  }),\n  cellExploded: css({\n    ...commonCell,\n    backgroundColor: '#F76767',\n    borderTop: '2px solid #555555',\n    borderLeft: '2px solid #555555',\n    borderBottom: '2px solid #F76767',\n    borderRight: '2px solid #F76767'\n  }),\n  cellFlag: css({\n    ...commonCell,\n    borderTop: '2px solid #EEEEEE',\n    borderLeft: '2px solid #EEEEEE',\n    borderBottom: '2px solid #555555',\n    borderRight: '2px solid #555555'\n  }),\n  cellNavigation: css({\n    backgroundColor: 'linen',\n    borderBottom: '2px solid #555555',\n    borderRight: '2px solid #555555'\n  }),\n  emoji: css({\n    color: 'red',\n    fontSize: '20px',\n    height: '1.5rem'\n  }),\n  value: css({\n    fontSize: '22px'\n  })\n}\n","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\n\nimport GameContext from '../contexts/Game'\n\nimport styles from './Cell.style'\n\nconst colors = [\n  '',\n  '#4286F4',\n  '#0BA51B',\n  '#6E25DB',\n  '#DB7325',\n  '#E22FB6',\n  '#D11F1F',\n  '#398452',\n  '#683B39'\n]\n\nconst Cell = ({ cell }) => {\n  const {\n    isGameOver,\n    cellClicked,\n    navigateUsingArrow,\n    toggleFlag,\n    setHover\n  } = useContext(GameContext)\n  return (\n    <td\n      className={`${styleIsFilled(cell, isGameOver)} ${styleIsHovered(\n        cell\n      )} ${styleIsActiveNavigation(cell, navigateUsingArrow)}`}\n      style={{ color: colors[cell.dangerLevel] }}\n      onClick={cellClicked.bind(this, [cell])}\n      onContextMenu={toggleFlag.bind(this, cell)}\n      onMouseEnter={setHover.bind(this, cell, true)}\n      onMouseLeave={setHover.bind(this, cell, false)}\n    >\n      <span\n        className={cell.hasBomb || cell.hasFlag ? styles.emoji : styles.value}\n      >\n        {renderValue(cell)}\n      </span>\n    </td>\n  )\n}\n\nconst styleIsFilled = (cell, isGameOver) => {\n  if (cell.hasFlag) return styles.cellFlag\n  if (cell.isVisible && cell.explode) return styles.cellExploded\n  if (cell.isVisible) return styles.cellVisible\n  return isGameOver ? styles.cellOver : styles.cell\n}\n\nconst styleIsHovered = cell => {\n  if (cell.isHovered) return styles.cellHovered\n}\n\nconst styleIsActiveNavigation = (cell, id) => {\n  if (cell.id === id) return styles.cellNavigation\n}\n\nconst renderValue = cell => {\n  if (cell.hasFlag) return '🚩'\n  if (!cell.isVisible) return ''\n  if (cell.hasBomb) return '💣'\n  if (cell.dangerLevel > 0) return cell.dangerLevel\n  return ''\n}\n\nCell.propTypes = {\n  cell: PropTypes.object.isRequired\n}\n\nexport default Cell\n","import { css } from 'glamor'\n\nexport default {\n  row: css({\n    display: 'flex',\n    justifyContent: 'center'\n  })\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Cell from './Cell'\n\nimport styles from './Row.style'\n\nconst Row = ({ row }) => (\n  <tr className={styles.row}>\n    {row.map((cell, index) => (\n      <Cell key={`cell-${index}`} cell={cell} />\n    ))}\n  </tr>\n)\n\nRow.propTypes = {\n  row: PropTypes.array.isRequired\n}\n\nexport default Row\n","import { css } from 'glamor'\n\nexport default {\n  grid: css({\n    borderCollapse: 'collapse',\n    borderTop: '2px solid #555555',\n    borderLeft: '2px solid #555555',\n    borderBottom: '2px solid #EEEEEE',\n    borderRight: '2px solid #EEEEEE',\n    height: '100%'\n  })\n}\n","import React, { useContext, useEffect } from 'react'\n\nimport Row from './Row'\nimport GameContext from '../contexts/Game'\n\nimport styles from './Grid.style'\n\nconst keys = {\n  ArrowDown: 'down',\n  ArrowUp: 'up',\n  ArrowLeft: 'left',\n  ArrowRight: 'right',\n  Enter: 'trigger',\n  a: 'trigger',\n  f: 'flag',\n  r: 'restart',\n  c: 'clean'\n}\n\nconst groupBy = (list, keyGetter) => {\n  const obj = list.reduce((acc, item) => {\n    const key = keyGetter(item)\n    if (acc[key]) {\n      acc[key].push(item)\n    } else {\n      acc[key] = [item]\n    }\n    return acc\n  }, {})\n  return obj\n}\n\nconst Grid = () => {\n  const { changeNavigation, grid } = useContext(GameContext)\n\n  const down = ({ key }) => {\n    const allowedKey = keys[key]\n    if (allowedKey) {\n      changeNavigation(allowedKey)\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('keydown', down)\n    return () => {\n      window.removeEventListener('keydown', down)\n    }\n  }, [])\n\n  return (\n    <table className={styles.grid}>\n      <tbody>{renderGrid(grid)}</tbody>\n    </table>\n  )\n}\n\nconst renderGrid = grid => {\n  const grouped = groupBy(grid, item => item.row)\n  let html = []\n  for (const [key, row] of Object.entries(grouped)) {\n    html.push(<Row key={`row-${key}`} row={row} />)\n  }\n  return html\n}\n\nexport default Grid\n","import React from 'react'\n\nimport './Checkbox.css'\n\nconst Checkbox = ({ checked, label, onChange }) => {\n  return (\n    <label className=\"container\">\n      {label}\n      <input type=\"checkbox\" checked={checked} onChange={onChange} />\n      <span className=\"checkmark\" />\n    </label>\n  )\n}\n\nexport default Checkbox\n","import { css } from 'glamor'\n\nexport default {\n  button: css({\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    border: '1px solid #4286F4',\n    borderRadius: '5px',\n    color: '#4286F4',\n    cursor: 'pointer',\n    display: 'flex',\n    fontSize: '16px',\n    height: '30px',\n    padding: '5px',\n    ':hover': {\n      backgroundColor: '#4286F4',\n      color: '#FFFFFF'\n    },\n    ':focus': {\n      outline: 'none'\n    }\n  })\n}\n","import React from 'react'\n\nimport styles from './Button.style'\n\nconst Button = props => (\n  <button className={styles.button} {...props}>\n    {props.children}\n  </button>\n)\n\nexport default Button\n","import { css } from 'glamor'\n\nexport default {\n  menu: css({\n    display: 'flex',\n    listStyle: 'none',\n    marginBottom: '30px'\n  }),\n  listItem: css({\n    borderBottom: '2px solid #FFFFFF',\n    cursor: 'pointer',\n    marginRight: '20px',\n    padding: '10px 0'\n  }),\n  listItemActive: css({\n    borderBottom: '2px solid #CCCCCC'\n  })\n}\n","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport { css } from 'glamor'\n\nimport GameContext from '../contexts/Game'\n\nimport styles from './Menu.style'\n\nconst Menu = () => {\n  const { changeLevel, selectedLevel } = useContext(GameContext)\n\n  return (\n    <ul className={styles.menu}>\n      {['BEGINNER', 'INTERMEDIATE', 'EXPERT'].map(level => (\n        <ListItem\n          action={changeLevel}\n          key={level}\n          level={level}\n          selectedLevel={selectedLevel}\n        />\n      ))}\n    </ul>\n  )\n}\n\nconst levelText = {\n  BEGINNER: 'Beginner',\n  INTERMEDIATE: 'Intermediate',\n  EXPERT: 'Expert'\n}\n\nconst ListItem = ({ action, level, selectedLevel }) => (\n  <li\n    {...css(\n      styles.listItem,\n      level === selectedLevel ? styles.listItemActive : ''\n    )}\n    onClick={action.bind(this, level)}\n  >\n    {levelText[level]}\n  </li>\n)\n\nListItem.propTypes = {\n  action: PropTypes.func.isRequired,\n  level: PropTypes.string.isRequired,\n  selectedLevel: PropTypes.string.isRequired\n}\n\nexport default Menu\n","import { css } from 'glamor'\n\nexport default {\n  container: css({\n    marginRight: '50px'\n  }),\n  wrapper: css({\n    marginBottom: '30px'\n  }),\n  info: css({\n    color: '#4286F4',\n    fontSize: '20px',\n    fontWeight: 'bold'\n  }),\n  button: css({\n    backgroundColor: '#FFFFFF',\n    border: '1px solid #AAAAAA',\n    borderRadius: '5px',\n    color: '#AAAAAA',\n    cursor: 'pointer',\n    fontSize: '16px',\n    height: '30px',\n    padding: '5px',\n    ':hover': {\n      backgroundColor: '#AAAAAA',\n      color: '#FFFFFF'\n    },\n    ':focus': {\n      outline: 'none'\n    }\n  }),\n  victory: css({\n    color: '#4286F4',\n    fontSize: '20px',\n    fontWeight: 'bold',\n    marginTop: '30px'\n  }),\n  cheatArea: css({\n    border: '1px solid #BBBBBB',\n    marginTop: '30px',\n    padding: '10px',\n    '> h1': {\n      color: '#555555',\n      fontSize: '20px',\n      marginBottom: '10px'\n    }\n  }),\n  hints: css({\n    lineHeight: '24px',\n    padding: '20px'\n  })\n}\n","import React, { useContext } from 'react'\n\nimport Checkbox from './common/Checkbox'\nimport Button from './common/Button'\nimport Menu from './Menu'\nimport GameContext from '../contexts/Game'\n\nimport styles from './Information.style'\n\nconst Information = () => {\n  const {\n    bombsRemaining,\n    cheat,\n    cleanCorners,\n    isVictory,\n    restartGame,\n    time,\n    toggleCheatHover\n  } = useContext(GameContext)\n\n  return (\n    <div className={styles.container}>\n      <Menu />\n\n      <div className={styles.wrapper}>\n        <div className={styles.container}>\n          <p>\n            Bombs remaining:{' '}\n            <span className={styles.info}>{bombsRemaining}</span>\n          </p>\n          <p>\n            Time: <span className={styles.info}>{time}</span>\n          </p>\n        </div>\n      </div>\n\n      <Button onClick={restartGame}>Restart</Button>\n\n      <div className={styles.victory}>{isVictory ? 'Victory :)' : ''}</div>\n\n      <div className={styles.cheatArea}>\n        <h1>Cheat area</h1>\n        <Checkbox\n          checked={cheat.hover}\n          label=\"Show hover\"\n          onChange={toggleCheatHover}\n        />\n        <Button onClick={cleanCorners}>Start with clean corners</Button>\n      </div>\n\n      <div className={styles.hints}>\n        <p>\n          <strong>Arrow keys</strong>: move\n        </p>\n        <p>\n          <strong>Enter / A</strong>: click cell\n        </p>\n        <p>\n          <strong>F</strong>: toggle flag\n        </p>\n        <p>\n          <strong>R</strong>: restart\n        </p>\n        <p>\n          <strong>C</strong>: start with clean corners\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default Information\n","import { css } from 'glamor'\n\nexport default {\n  app: css({\n    display: 'flex',\n    justifyContent: 'center'\n  })\n}\n","import React from 'react'\nimport Grid from './Grid'\nimport Information from './Information'\nimport { GameProvider } from '../contexts/Game'\n\nimport styles from './App.style.js'\n\nconst App = () => (\n  <div className={styles.app}>\n    <GameProvider>\n      <Information />\n      <Grid />\n    </GameProvider>\n  </div>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}