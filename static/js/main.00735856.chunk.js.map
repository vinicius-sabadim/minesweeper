{"version":3,"sources":["utils.js","contexts/Game.js","components/Cell.style.js","components/Cell.js","components/Row.style.js","components/Row.js","components/Grid.style.js","components/Grid.js","components/common/Checkbox.js","components/common/Button.style.js","components/common/Button.js","components/Menu.style.js","components/Menu.js","components/Information.style.js","components/Information.js","components/App.style.js","components/App.js","index.js"],"names":["random","value","Math","floor","generateGrid","rows","columns","grid","cells","index","Object","toConsumableArray","Array","id","parseInt","push","row","column","hasBomb","hasFlag","dangerLevel","isHovered","isVisible","neighbors","generateBombs","bombs","cleanBorders","bombsInserted","getId","objectSpread","explode","total","blockedIds","length","allGood","includes","includeNeighborInformation","map","cell","hasUpperRow","hasLeftColumn","hasRightColumn","hasLowerRow","generateDanger","forEach","calculateDangerLevel","neighbor","GameContext","React","createContext","gameStatus","ready","playing","gameover","victory","gridSize","Beginner","Intermediate","Expert","bombsQuantity","GameProvider","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","bombsRemaining","cellsToDiscover","cheat","hover","navigateUsingArrow","status","selectedLevel","time","timer","componentDidMount","startGrid","asyncToGenerator","regenerator_default","a","mark","_callee","_this$state","newGrid","wrap","_context","prev","next","utils","setState","abrupt","sent","stop","restartGame","_ref2","_callee2","event","_context2","detail","stopTimer","_x","changeLevel","_gridSize$selectedLev","cellClicked","clickedCells","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","changeCellToVisible","clickedOnBomb","remainingCellsToDiscover","updateCellsToDiscover","verifyVictory","err","return","startTimer","newCellsToDiscover","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","clickedCell","toggleFlag","preventDefault","newBombsRemaining","setHover","_callee3","_this$state2","cellTopLeft","cellTopRight","cellBottomLeft","cellBottomRight","_context3","toggleCheatHover","changeNavigation","action","activeCell","_this$state3","newNavigateUsingArrow","setInterval","clearInterval","render","react_default","createElement","Provider","isGameOver","isVictory","props","children","inherits","Component","commonCell","alignItems","backgroundColor","cursor","display","fontWeight","height","justifyContent","maxHeight","maxWidth","position","userSelect","width","Cell_style","css","borderTop","borderLeft","borderBottom","borderRight",":hover","cellOver","cellVisible","cellHovered","cellExploded","cellFlag","cellNavigation","emoji","color","fontSize","colors","styleIsFilled","styles","styleIsHovered","styleIsActiveNavigation","renderValue","Cell","_ref","_useContext","useContext","className","style","onClick","bind","onContextMenu","onMouseEnter","onMouseLeave","Row_style","Row","components_Cell","key","Grid_style","borderCollapse","keys","ArrowDown","ArrowUp","ArrowLeft","ArrowRight","Enter","f","r","c","renderGrid","keyGetter","grouped","item","reduce","acc","html","_arr","entries","_i","_ref4","_ref3","slicedToArray","components_Row","Grid","down","allowedKey","useEffect","window","addEventListener","removeEventListener","Checkbox","checked","label","onChange","type","Button_style","button","border","borderRadius","padding",":focus","outline","Button","assign","Menu_style","menu","listStyle","marginBottom","listItem","marginRight","listItemActive","ListItem","level","Menu","Menu_ListItem","Information_style","container","wrapper","info","marginTop","cheatArea","> h1","hints","lineHeight","Information","components_Menu","common_Button","components_common_Checkbox","App_style","app","App","Game_GameProvider","components_Information","components_Grid","ReactDOM","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.00735856.chunk.js","sourcesContent":["export const random = value => Math.floor(Math.random() * value)\n\nexport const groupBy = (list, keyGetter) => {\n  const obj = list.reduce((acc, item) => {\n    const key = keyGetter(item)\n    if (acc[key]) {\n      acc[key].push(item)\n    } else {\n      acc[key] = [item]\n    }\n    return acc\n  }, {})\n  return obj\n}\n\nexport const generateGrid = (rows, columns) => {\n  const grid = []\n  const cells = rows * columns\n\n  for (const index in [...Array(cells)]) {\n    const id = parseInt(index, 10)\n    grid.push({\n      id,\n      row: Math.floor(id / columns),\n      column: id % columns,\n      hasBomb: false,\n      hasFlag: false,\n      dangerLevel: 0,\n      isHovered: false,\n      isVisible: false,\n      neighbors: []\n    })\n  }\n\n  return grid\n}\n\nexport const generateBombs = (grid, rows, columns, bombs, cleanBorders) => {\n  let bombsInserted = 0\n\n  while (bombsInserted < bombs) {\n    const id = getId(grid, rows, columns, cleanBorders)\n    if (!grid[id].hasBomb) {\n      grid[id] = {\n        ...grid[id],\n        hasBomb: true,\n        explode: false\n      }\n      bombsInserted = bombsInserted + 1\n    }\n  }\n  return grid\n}\n\nconst getId = (grid, rows, columns, cleanBorders) => {\n  const total = rows * columns\n  if (cleanBorders) {\n    const blockedIds = [\n      grid[0].id,\n      grid[columns - 1].id,\n      grid[(rows - 1) * columns].id,\n      grid[grid.length - 1].id\n    ]\n    let allGood = false\n    let id = null\n    while (!allGood) {\n      id = random(total)\n      if (!blockedIds.includes(id)) {\n        allGood = true\n      }\n    }\n    return id\n  } else {\n    return random(total)\n  }\n}\n\nexport const includeNeighborInformation = (grid, rows, columns) => {\n  const newGrid = grid.map(cell => {\n    const neighbors = cell.neighbors\n    if (hasUpperRow(cell) && hasLeftColumn(cell))\n      neighbors.push(cell.id - columns - 1)\n\n    if (hasUpperRow(cell)) {\n      neighbors.push(cell.id - columns)\n    }\n\n    if (hasUpperRow(cell) && hasRightColumn(cell, columns)) {\n      neighbors.push(cell.id - columns + 1)\n    }\n\n    if (hasLeftColumn(cell)) {\n      neighbors.push(cell.id - 1)\n    }\n\n    if (hasRightColumn(cell, columns)) {\n      neighbors.push(cell.id + 1)\n    }\n\n    if (hasLowerRow(cell, rows) && hasLeftColumn(cell)) {\n      neighbors.push(cell.id + columns - 1)\n    }\n\n    if (hasLowerRow(cell, rows)) {\n      neighbors.push(cell.id + columns)\n    }\n\n    if (hasLowerRow(cell, rows) && hasRightColumn(cell, columns)) {\n      neighbors.push(cell.id + columns + 1)\n    }\n\n    return {\n      ...cell,\n      neighbors\n    }\n  })\n  return newGrid\n}\n\nexport const generateDanger = grid => {\n  grid.forEach(cell => {\n    cell.dangerLevel = calculateDangerLevel(grid, cell)\n  })\n\n  return grid\n}\n\nexport const calculateDangerLevel = (grid, cell) => {\n  let dangerLevel = 0\n\n  cell.neighbors.forEach(neighbor => {\n    dangerLevel = grid[neighbor].hasBomb ? dangerLevel + 1 : dangerLevel\n  })\n\n  return dangerLevel\n}\n\nexport const hasUpperRow = cell => {\n  return cell.row - 1 >= 0\n}\n\nexport const hasLowerRow = (cell, rows) => {\n  return cell.row + 1 < rows\n}\n\nexport const hasLeftColumn = cell => {\n  return cell.column - 1 >= 0\n}\n\nexport const hasRightColumn = (cell, columns) => {\n  return cell.column + 1 < columns\n}\n","import React from 'react'\n\nimport * as utils from '../utils'\n\nconst GameContext = React.createContext()\n\nconst gameStatus = {\n  ready: 0,\n  playing: 1,\n  gameover: 2,\n  victory: 3\n}\n\nconst gridSize = {\n  Beginner: { rows: 9, columns: 9 },\n  Intermediate: { rows: 16, columns: 16 },\n  Expert: { rows: 16, columns: 30 }\n}\n\nconst bombsQuantity = {\n  Beginner: 10,\n  Intermediate: 40,\n  Expert: 99\n}\n\nexport class GameProvider extends React.Component {\n  state = {\n    bombs: 10,\n    bombsRemaining: 10,\n    cellsToDiscover: 71,\n    cheat: {\n      cleanBorders: false,\n      hover: false\n    },\n    columns: 9,\n    grid: [],\n    navigateUsingArrow: 0,\n    rows: 9,\n    status: gameStatus.ready,\n    selectedLevel: 'Beginner',\n    time: 0\n  }\n\n  timer = () => {}\n\n  componentDidMount = () => this.startGrid()\n\n  startGrid = async () => {\n    const { columns, rows, bombs, cheat } = this.state\n    let newGrid = utils.generateGrid(rows, columns)\n    newGrid = utils.generateBombs(\n      newGrid,\n      rows,\n      columns,\n      bombs,\n      cheat.cleanBorders\n    )\n    newGrid = utils.includeNeighborInformation(newGrid, rows, columns)\n    newGrid = utils.generateDanger(newGrid)\n    return await this.setState({ grid: newGrid })\n  }\n\n  restartGame = async event => {\n    // Prevents the trigger using the \"enter\" key\n    if (event && event.detail === 0) return\n\n    this.stopTimer()\n\n    this.setState({\n      bombsRemaining: bombsQuantity[this.state.selectedLevel],\n      cellsToDiscover: this.state.rows * this.state.columns - this.state.bombs,\n      cheat: {\n        ...this.state.cheat,\n        cleanBorders: false\n      },\n      navigateUsingArrow: 0,\n      status: gameStatus.ready,\n      time: 0\n    })\n    return await this.startGrid()\n  }\n\n  changeLevel = selectedLevel => {\n    this.setState({ selectedLevel }, this.restartGame)\n\n    const bombs = bombsQuantity[selectedLevel]\n    const { rows, columns } = gridSize[selectedLevel]\n\n    this.setState({ bombs, columns, rows }, this.startGrid)\n  }\n\n  cellClicked = clickedCells => {\n    const { status } = this.state\n    if (status !== gameStatus.ready && status !== gameStatus.playing) return\n\n    let newGrid = this.state.grid\n    for (const cell of clickedCells) {\n      if (cell.isVisible) return\n      if (cell.hasFlag) return\n      newGrid = this.changeCellToVisible(this.state.grid, cell)\n\n      if (cell.hasBomb) {\n        this.setState({ status: gameStatus.gameover })\n        newGrid = this.clickedOnBomb(newGrid, cell)\n      } else {\n        const remainingCellsToDiscover = this.updateCellsToDiscover(newGrid)\n        this.verifyVictory(remainingCellsToDiscover)\n      }\n    }\n    if (status === gameStatus.ready) {\n      this.setState({ status: gameStatus.playing }, () => {\n        if (clickedCells.length > 1) {\n          this.startTimer()\n        } else if (!clickedCells[0].hasBomb) {\n          this.startTimer()\n        }\n      })\n    }\n\n    this.setState({ grid: newGrid })\n  }\n\n  updateCellsToDiscover = grid => {\n    let newCellsToDiscover = this.state.cellsToDiscover\n    for (const cell of grid) {\n      if (cell.isVisible) newCellsToDiscover = newCellsToDiscover - 1\n    }\n    return newCellsToDiscover\n  }\n\n  verifyVictory = cells => {\n    if (cells === 0) {\n      this.stopTimer()\n      this.setState({ status: gameStatus.victory })\n    }\n  }\n\n  changeCellToVisible = (grid, cell) => {\n    grid[cell.id] = { ...cell, isVisible: true }\n\n    // Show all the cells without danger level related to this cell.\n    if (cell.dangerLevel === 0 && !cell.hasBomb && !cell.isVisible) {\n      cell.neighbors.forEach(neighbor => {\n        this.changeCellToVisible(grid, grid[neighbor])\n      })\n    }\n\n    return grid\n  }\n\n  clickedOnBomb = (grid, clickedCell) => {\n    this.stopTimer()\n\n    grid[clickedCell.id] = {\n      ...clickedCell,\n      isVisible: true,\n      explode: true\n    }\n\n    grid = grid.map(cell => {\n      if (cell.hasBomb && !cell.explode) {\n        return { ...cell, isVisible: true }\n      }\n      return cell\n    })\n\n    return grid\n  }\n\n  toggleFlag = (clickedCell, event) => {\n    if (event) {\n      event.preventDefault()\n    }\n\n    if (clickedCell.isVisible) return\n\n    const newGrid = this.state.grid\n    const cell = newGrid[clickedCell.id]\n\n    const newBombsRemaining = cell.hasFlag\n      ? this.state.bombsRemaining + 1\n      : this.state.bombsRemaining - 1\n\n    newGrid[clickedCell.id] = {\n      ...cell,\n      hasFlag: !cell.hasFlag\n    }\n\n    this.setState({ bombsRemaining: newBombsRemaining, grid: newGrid })\n  }\n\n  setHover = (cell, isHovered) => {\n    if (!this.state.cheat.hover) return\n\n    const newGrid = this.state.grid\n    newGrid[cell.id] = { ...cell, isHovered }\n\n    cell.neighbors.forEach(neighbor => {\n      newGrid[neighbor].isHovered = isHovered\n    })\n\n    this.setState({ grid: newGrid })\n  }\n\n  cleanBorders = event => {\n    // Prevents the trigger using the \"enter\" key\n    if (event && event.detail === 0) return\n\n    this.setState(\n      {\n        cheat: {\n          ...this.state.cheat,\n          cleanBorders: true\n        }\n      },\n      async () => {\n        await this.restartGame()\n\n        const { columns, grid, rows } = this.state\n        const cellTopLeft = grid[0]\n        const cellTopRight = grid[columns - 1]\n        const cellBottomLeft = grid[(rows - 1) * columns]\n        const cellBottomRight = grid[grid.length - 1]\n\n        this.cellClicked([\n          cellTopLeft,\n          cellTopRight,\n          cellBottomLeft,\n          cellBottomRight\n        ])\n      }\n    )\n  }\n\n  toggleCheatHover = () => {\n    const { cheat } = this.state\n    this.setState({\n      cheat: {\n        ...cheat,\n        hover: !cheat.hover\n      }\n    })\n  }\n\n  changeNavigation = action => {\n    const id = this.state.navigateUsingArrow\n    const newGrid = this.state.grid\n    const activeCell = newGrid[id]\n    const { columns, rows } = this.state\n\n    let newNavigateUsingArrow = id\n\n    if (action === 'down' && utils.hasLowerRow(activeCell, rows)) {\n      newNavigateUsingArrow = id + columns\n    } else if (action === 'up' && utils.hasUpperRow(activeCell)) {\n      newNavigateUsingArrow = id - columns\n    } else if (action === 'left' && utils.hasLeftColumn(activeCell)) {\n      newNavigateUsingArrow = id - 1\n    } else if (\n      action === 'right' &&\n      utils.hasRightColumn(activeCell, columns)\n    ) {\n      newNavigateUsingArrow = id + 1\n    } else if (action === 'trigger') {\n      this.cellClicked([activeCell])\n    } else if (action === 'flag') {\n      this.toggleFlag(activeCell)\n    } else if (action === 'restart') {\n      this.restartGame()\n    } else if (action === 'clean') {\n      this.cleanBorders()\n    }\n    this.setState({ navigateUsingArrow: newNavigateUsingArrow })\n  }\n\n  startTimer = () => {\n    this.timer = setInterval(() => {\n      this.setState({ time: this.state.time + 1 })\n    }, 1000)\n  }\n\n  stopTimer = () => {\n    clearInterval(this.timer)\n  }\n\n  render = () => {\n    return (\n      <GameContext.Provider\n        value={{\n          bombsRemaining: this.state.bombsRemaining,\n          changeLevel: this.changeLevel,\n          changeNavigation: this.changeNavigation,\n          cellClicked: this.cellClicked,\n          cheat: this.state.cheat,\n          cleanBorders: this.cleanBorders,\n          grid: this.state.grid,\n          isGameOver: this.state.status === gameStatus.gameover,\n          isVictory: this.state.status === gameStatus.victory,\n          navigateUsingArrow: this.state.navigateUsingArrow,\n          restartGame: this.restartGame,\n          selectedLevel: this.state.selectedLevel,\n          time: this.state.time,\n          toggleCheatHover: this.toggleCheatHover,\n          toggleFlag: this.toggleFlag,\n          setHover: this.setHover\n        }}\n      >\n        {this.props.children}\n      </GameContext.Provider>\n    )\n  }\n}\n\nexport default GameContext\n","import { css } from 'glamor'\n\nconst commonCell = {\n  alignItems: 'center',\n  backgroundColor: '#DDDDDD',\n  cursor: 'pointer',\n  display: 'flex',\n  fontWeight: 'bold',\n  height: '2rem',\n  justifyContent: 'center',\n  maxHeight: '40px',\n  maxWidth: '40px',\n  position: 'relative',\n  userSelect: 'none',\n  width: '2rem'\n}\n\nexport default {\n  cell: css({\n    ...commonCell,\n    borderTop: '2px solid #EEEEEE',\n    borderLeft: '2px solid #EEEEEE',\n    borderBottom: '2px solid #555555',\n    borderRight: '2px solid #555555',\n    ':hover': {\n      backgroundColor: '#EEEEEE'\n    }\n  }),\n  cellOver: css({\n    ...commonCell,\n    borderTop: '2px solid #EEEEEE',\n    borderLeft: '2px solid #EEEEEE',\n    borderBottom: '2px solid #555555',\n    borderRight: '2px solid #555555'\n  }),\n  cellVisible: css({\n    ...commonCell,\n    backgroundColor: '#CCCCCC',\n    borderTop: '2px solid #555555',\n    borderLeft: '2px solid #555555',\n    borderBottom: '2px solid #CCCCCC',\n    borderRight: '2px solid #CCCCCC'\n  }),\n  cellHovered: css({\n    backgroundColor: '#90FC6F'\n  }),\n  cellExploded: css({\n    ...commonCell,\n    backgroundColor: '#F76767',\n    borderTop: '2px solid #555555',\n    borderLeft: '2px solid #555555',\n    borderBottom: '2px solid #F76767',\n    borderRight: '2px solid #F76767'\n  }),\n  cellFlag: css({\n    ...commonCell,\n    borderTop: '2px solid #EEEEEE',\n    borderLeft: '2px solid #EEEEEE',\n    borderBottom: '2px solid #555555',\n    borderRight: '2px solid #555555'\n  }),\n  cellNavigation: css({\n    backgroundColor: 'linen'\n  }),\n  emoji: css({\n    color: 'red',\n    fontSize: '20px',\n    height: '1.5rem'\n  }),\n  value: css({\n    fontSize: '22px'\n  })\n}\n","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\n\nimport GameContext from '../contexts/Game'\n\nimport styles from './Cell.style'\n\nconst colors = [\n  '',\n  '#4286F4',\n  '#0BA51B',\n  '#6E25DB',\n  '#DB7325',\n  '#E22FB6',\n  '#D11F1F',\n  '#398452',\n  '#683B39'\n]\n\nconst Cell = ({ cell }) => {\n  const {\n    isGameOver,\n    cellClicked,\n    navigateUsingArrow,\n    toggleFlag,\n    setHover\n  } = useContext(GameContext)\n  return (\n    <td\n      className={`${styleIsFilled(cell, isGameOver)} ${styleIsHovered(\n        cell\n      )} ${styleIsActiveNavigation(cell, navigateUsingArrow)}`}\n      style={{ color: colors[cell.dangerLevel] }}\n      onClick={cellClicked.bind(this, [cell])}\n      onContextMenu={toggleFlag.bind(this, cell)}\n      onMouseEnter={setHover.bind(this, cell, true)}\n      onMouseLeave={setHover.bind(this, cell, false)}\n    >\n      <span\n        className={cell.hasBomb || cell.hasFlag ? styles.emoji : styles.value}\n      >\n        {renderValue(cell)}\n      </span>\n    </td>\n  )\n}\n\nconst styleIsFilled = (cell, isGameOver) => {\n  if (cell.hasFlag) return styles.cellFlag\n  if (cell.isVisible && cell.explode) return styles.cellExploded\n  if (cell.isVisible) return styles.cellVisible\n  return isGameOver ? styles.cellOver : styles.cell\n}\n\nconst styleIsHovered = cell => {\n  if (cell.isHovered) return styles.cellHovered\n}\n\nconst styleIsActiveNavigation = (cell, id) => {\n  if (cell.id === id) return styles.cellNavigation\n}\n\nconst renderValue = cell => {\n  if (cell.hasFlag) return '🚩'\n  if (!cell.isVisible) return ''\n  if (cell.hasBomb) return '💣'\n  if (cell.dangerLevel > 0) return cell.dangerLevel\n  return ''\n}\n\nCell.propTypes = {\n  cell: PropTypes.object.isRequired\n}\n\nexport default Cell\n","import { css } from 'glamor'\n\nexport default {\n  row: css({\n    display: 'flex',\n    justifyContent: 'center'\n  })\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Cell from './Cell'\n\nimport styles from './Row.style'\n\nconst Row = ({ row }) => (\n  <tr className={styles.row}>\n    {row.map((cell, index) => (\n      <Cell key={`cell-${index}`} cell={cell} />\n    ))}\n  </tr>\n)\n\nRow.propTypes = {\n  row: PropTypes.array.isRequired\n}\n\nexport default Row\n","import { css } from 'glamor'\n\nexport default {\n  grid: css({\n    borderCollapse: 'collapse',\n    borderTop: '2px solid #555555',\n    borderLeft: '2px solid #555555',\n    borderBottom: '2px solid #EEEEEE',\n    borderRight: '2px solid #EEEEEE',\n    height: '100%'\n  })\n}\n","import React, { useContext, useEffect } from 'react'\n\nimport Row from './Row'\nimport GameContext from '../contexts/Game'\n\nimport { groupBy } from '../utils'\n\nimport styles from './Grid.style'\n\nconst keys = {\n  ArrowDown: 'down',\n  ArrowUp: 'up',\n  ArrowLeft: 'left',\n  ArrowRight: 'right',\n  Enter: 'trigger',\n  f: 'flag',\n  r: 'restart',\n  c: 'clean'\n}\n\nconst Grid = () => {\n  const { changeNavigation, grid } = useContext(GameContext)\n\n  const down = ({ key }) => {\n    const allowedKey = keys[key]\n    if (allowedKey) {\n      changeNavigation(allowedKey)\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('keydown', down)\n    return () => {\n      window.removeEventListener('keydown', down)\n    }\n  }, [])\n\n  return (\n    <table className={styles.grid}>\n      <tbody>{renderGrid(grid)}</tbody>\n    </table>\n  )\n}\n\nconst renderGrid = grid => {\n  const grouped = groupBy(grid, item => item.row)\n  let html = []\n  for (const [key, row] of Object.entries(grouped)) {\n    html.push(<Row key={`row-${key}`} row={row} />)\n  }\n  return html\n}\n\nexport default Grid\n","import React from 'react'\n\nimport './Checkbox.css'\n\nconst Checkbox = ({ checked, label, onChange }) => {\n  return (\n    <label className=\"container\">\n      {label}\n      <input type=\"checkbox\" checked={checked} onChange={onChange} />\n      <span className=\"checkmark\" />\n    </label>\n  )\n}\n\nexport default Checkbox\n","import { css } from 'glamor'\n\nexport default {\n  button: css({\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    border: '1px solid #4286F4',\n    borderRadius: '5px',\n    color: '#4286F4',\n    cursor: 'pointer',\n    display: 'flex',\n    fontSize: '16px',\n    height: '30px',\n    padding: '5px',\n    ':hover': {\n      backgroundColor: '#4286F4',\n      color: '#FFFFFF'\n    },\n    ':focus': {\n      outline: 'none'\n    }\n  })\n}\n","import React from 'react'\n\nimport styles from './Button.style'\n\nconst Button = props => (\n  <button className={styles.button} {...props}>\n    {props.children}\n  </button>\n)\n\nexport default Button\n","import { css } from 'glamor'\n\nexport default {\n  menu: css({\n    display: 'flex',\n    listStyle: 'none',\n    marginBottom: '30px'\n  }),\n  listItem: css({\n    borderBottom: '2px solid #FFFFFF',\n    cursor: 'pointer',\n    marginRight: '20px',\n    padding: '10px 0'\n  }),\n  listItemActive: css({\n    borderBottom: '2px solid #CCCCCC'\n  })\n}\n","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport { css } from 'glamor'\n\nimport GameContext from '../contexts/Game'\n\nimport styles from './Menu.style'\n\nconst Menu = () => {\n  const { changeLevel, selectedLevel } = useContext(GameContext)\n\n  return (\n    <ul className={styles.menu}>\n      {['Beginner', 'Intermediate', 'Expert'].map(level => (\n        <ListItem\n          action={changeLevel}\n          key={level}\n          level={level}\n          selectedLevel={selectedLevel}\n        />\n      ))}\n    </ul>\n  )\n}\n\nconst ListItem = ({ action, level, selectedLevel }) => (\n  <li\n    {...css(\n      styles.listItem,\n      level === selectedLevel ? styles.listItemActive : ''\n    )}\n    onClick={action.bind(this, level)}\n  >\n    {level}\n  </li>\n)\n\nListItem.propTypes = {\n  action: PropTypes.func.isRequired,\n  level: PropTypes.string.isRequired,\n  selectedLevel: PropTypes.string.isRequired\n}\n\nexport default Menu\n","import { css } from 'glamor'\n\nexport default {\n  container: css({\n    marginRight: '50px'\n  }),\n  wrapper: css({\n    marginBottom: '30px'\n  }),\n  info: css({\n    color: '#4286F4',\n    fontSize: '20px',\n    fontWeight: 'bold'\n  }),\n  button: css({\n    backgroundColor: '#FFFFFF',\n    border: '1px solid #AAAAAA',\n    borderRadius: '5px',\n    color: '#AAAAAA',\n    cursor: 'pointer',\n    fontSize: '16px',\n    height: '30px',\n    padding: '5px',\n    ':hover': {\n      backgroundColor: '#AAAAAA',\n      color: '#FFFFFF'\n    },\n    ':focus': {\n      outline: 'none'\n    }\n  }),\n  victory: css({\n    color: '#4286F4',\n    fontSize: '20px',\n    fontWeight: 'bold',\n    marginTop: '30px'\n  }),\n  cheatArea: css({\n    border: '1px solid #BBBBBB',\n    marginTop: '30px',\n    padding: '10px',\n    '> h1': {\n      color: '#555555',\n      fontSize: '20px',\n      marginBottom: '10px'\n    }\n  }),\n  hints: css({\n    lineHeight: '24px',\n    padding: '20px'\n  })\n}\n","import React, { useContext } from 'react'\n\nimport Checkbox from './common/Checkbox'\nimport Button from './common/Button'\nimport Menu from './Menu'\nimport GameContext from '../contexts/Game'\n\nimport styles from './Information.style'\n\nconst Information = () => {\n  const {\n    bombsRemaining,\n    cheat,\n    cleanBorders,\n    isVictory,\n    restartGame,\n    time,\n    toggleCheatHover\n  } = useContext(GameContext)\n\n  return (\n    <div className={styles.container}>\n      <Menu />\n\n      <div className={styles.wrapper}>\n        <div className={styles.container}>\n          <p>\n            Bombs remaining:{' '}\n            <span className={styles.info}>{bombsRemaining}</span>\n          </p>\n          <p>\n            Time: <span className={styles.info}>{time}</span>\n          </p>\n        </div>\n      </div>\n\n      <Button onClick={restartGame}>Restart</Button>\n\n      <div className={styles.victory}>{isVictory ? 'Victory :)' : ''}</div>\n\n      <div className={styles.cheatArea}>\n        <h1>Cheat area</h1>\n        <Checkbox\n          checked={cheat.hover}\n          label=\"Show hover\"\n          onChange={toggleCheatHover}\n        />\n        <Button onClick={cleanBorders}>Start with clean borders</Button>\n      </div>\n\n      <div className={styles.hints}>\n        <p>\n          <strong>Arrow keys</strong>: move\n        </p>\n        <p>\n          <strong>Enter</strong>: click cell\n        </p>\n        <p>\n          <strong>F</strong>: toggle flag\n        </p>\n        <p>\n          <strong>R</strong>: restart\n        </p>\n        <p>\n          <strong>C</strong>: start with clean border\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default Information\n","import { css } from 'glamor'\n\nexport default {\n  app: css({\n    display: 'flex',\n    justifyContent: 'center'\n  })\n}\n","import React from 'react'\nimport Grid from './Grid'\nimport Information from './Information'\nimport { GameProvider } from '../contexts/Game'\n\nimport styles from './App.style.js'\n\nconst App = () => (\n  <div className={styles.app}>\n    <GameProvider>\n      <Information />\n      <Grid />\n    </GameProvider>\n  </div>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}