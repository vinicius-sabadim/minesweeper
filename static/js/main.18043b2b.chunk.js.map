{"version":3,"sources":["utils.js","contexts/Game.js","components/Cell.style.js","components/Cell.js","components/Row.style.js","components/Row.js","components/Grid.style.js","components/Grid.js","components/common/Checkbox.js","components/common/Button.style.js","components/common/Button.js","components/Menu.style.js","components/Menu.js","components/Information.style.js","components/Information.js","components/App.style.js","components/App.js","index.js"],"names":["random","value","Math","floor","generateGrid","rows","columns","grid","cells","index","Object","toConsumableArray","Array","id","parseInt","push","row","column","hasBomb","hasFlag","dangerLevel","isHovered","isVisible","neighbors","generateBombs","bombs","cleanBorders","bombsInserted","getId","objectSpread","explode","total","blockedIds","length","allGood","includes","includeNeighborInformation","map","cell","hasUpperRow","hasLeftColumn","hasRightColumn","hasLowerRow","generateDanger","forEach","calculateDangerLevel","neighbor","GameContext","React","createContext","gameStatus","ready","playing","gameover","victory","gridSize","Beginner","Intermediate","Expert","bombsQuantity","GameProvider","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","bombsRemaining","cellsToDiscover","cheat","hover","status","selectedLevel","time","timer","componentDidMount","startGrid","asyncToGenerator","regenerator_default","a","mark","_callee","_this$state","newGrid","wrap","_context","prev","next","utils","setState","abrupt","sent","stop","restartGame","_callee2","_context2","stopTimer","changeLevel","_gridSize$selectedLev","cellClicked","clickedCells","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","changeCellToVisible","clickedOnBomb","remainingCellsToDiscover","updateCellsToDiscover","verifyVictory","err","return","startTimer","newCellsToDiscover","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","clickedCell","toggleFlag","event","preventDefault","newBombsRemaining","setHover","_callee3","_this$state2","cellTopLeft","cellTopRight","cellBottomLeft","cellBottomRight","_context3","toggleCheatHover","setInterval","clearInterval","render","react_default","createElement","Provider","isGameOver","isVictory","props","children","inherits","Component","commonCell","alignItems","backgroundColor","cursor","display","fontWeight","height","justifyContent","maxHeight","maxWidth","position","userSelect","width","Cell_style","css","borderTop","borderLeft","borderBottom","borderRight",":hover","cellOver","cellVisible","cellHovered","cellExploded","cellFlag","emoji","color","fontSize","colors","styleIsFilled","styles","styleIsHovered","renderValue","Cell","_ref","_useContext","useContext","className","style","onClick","bind","onContextMenu","onMouseEnter","onMouseLeave","Row_style","Row","components_Cell","key","Grid_style","borderCollapse","renderGrid","keyGetter","grouped","item","reduce","acc","html","_arr","entries","_i","_ref3","_ref2","slicedToArray","components_Row","Grid","Checkbox","checked","label","onChange","type","Button_style","button","border","borderRadius","padding",":focus","outline","Button","assign","Menu_style","menu","listStyle","marginBottom","listItem","marginRight","listItemActive","ListItem","action","level","Menu","Menu_ListItem","Information_style","container","wrapper","info","marginTop","cheatArea","> h1","Information","components_Menu","common_Button","components_common_Checkbox","App_style","app","App","Game_GameProvider","components_Information","components_Grid","ReactDOM","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.18043b2b.chunk.js","sourcesContent":["export const random = value => Math.floor(Math.random() * value)\n\nexport const groupBy = (list, keyGetter) => {\n  const obj = list.reduce((acc, item) => {\n    const key = keyGetter(item)\n    if (acc[key]) {\n      acc[key].push(item)\n    } else {\n      acc[key] = [item]\n    }\n    return acc\n  }, {})\n  return obj\n}\n\nexport const generateGrid = (rows, columns) => {\n  const grid = []\n  const cells = rows * columns\n\n  for (const index in [...Array(cells)]) {\n    const id = parseInt(index, 10)\n    grid.push({\n      id,\n      row: Math.floor(id / columns),\n      column: id % columns,\n      hasBomb: false,\n      hasFlag: false,\n      dangerLevel: 0,\n      isHovered: false,\n      isVisible: false,\n      neighbors: []\n    })\n  }\n\n  return grid\n}\n\nexport const generateBombs = (grid, rows, columns, bombs, cleanBorders) => {\n  let bombsInserted = 0\n\n  while (bombsInserted < bombs) {\n    const id = getId(grid, rows, columns, cleanBorders)\n    if (!grid[id].hasBomb) {\n      grid[id] = {\n        ...grid[id],\n        hasBomb: true,\n        explode: false\n      }\n      bombsInserted = bombsInserted + 1\n    }\n  }\n  return grid\n}\n\nconst getId = (grid, rows, columns, cleanBorders) => {\n  const total = rows * columns\n  if (cleanBorders) {\n    const blockedIds = [\n      grid[0].id,\n      grid[columns - 1].id,\n      grid[(rows - 1) * columns].id,\n      grid[grid.length - 1].id\n    ]\n    let allGood = false\n    let id = null\n    while (!allGood) {\n      id = random(total)\n      if (!blockedIds.includes(id)) {\n        allGood = true\n      }\n    }\n    return id\n  } else {\n    return random(total)\n  }\n}\n\nexport const includeNeighborInformation = (grid, rows, columns) => {\n  const newGrid = grid.map(cell => {\n    const neighbors = cell.neighbors\n    if (hasUpperRow(cell) && hasLeftColumn(cell))\n      neighbors.push(cell.id - columns - 1)\n\n    if (hasUpperRow(cell)) {\n      neighbors.push(cell.id - columns)\n    }\n\n    if (hasUpperRow(cell) && hasRightColumn(cell, columns)) {\n      neighbors.push(cell.id - columns + 1)\n    }\n\n    if (hasLeftColumn(cell)) {\n      neighbors.push(cell.id - 1)\n    }\n\n    if (hasRightColumn(cell, columns)) {\n      neighbors.push(cell.id + 1)\n    }\n\n    if (hasLowerRow(cell, rows) && hasLeftColumn(cell)) {\n      neighbors.push(cell.id + columns - 1)\n    }\n\n    if (hasLowerRow(cell, rows)) {\n      neighbors.push(cell.id + columns)\n    }\n\n    if (hasLowerRow(cell, rows) && hasRightColumn(cell, columns)) {\n      neighbors.push(cell.id + columns + 1)\n    }\n\n    return {\n      ...cell,\n      neighbors\n    }\n  })\n  return newGrid\n}\n\nexport const generateDanger = grid => {\n  grid.forEach(cell => {\n    cell.dangerLevel = calculateDangerLevel(grid, cell)\n  })\n\n  return grid\n}\n\nexport const calculateDangerLevel = (grid, cell) => {\n  let dangerLevel = 0\n\n  cell.neighbors.forEach(neighbor => {\n    dangerLevel = grid[neighbor].hasBomb ? dangerLevel + 1 : dangerLevel\n  })\n\n  return dangerLevel\n}\n\nexport const hasUpperRow = cell => {\n  return cell.row - 1 >= 0\n}\n\nexport const hasLowerRow = (cell, rows) => {\n  return cell.row + 1 < rows\n}\n\nexport const hasLeftColumn = cell => {\n  return cell.column - 1 >= 0\n}\n\nexport const hasRightColumn = (cell, columns) => {\n  return cell.column + 1 < columns\n}\n","import React from 'react'\n\nimport * as utils from '../utils'\n\nconst GameContext = React.createContext()\n\nconst gameStatus = {\n  ready: 0,\n  playing: 1,\n  gameover: 2,\n  victory: 3\n}\n\nconst gridSize = {\n  Beginner: { rows: 9, columns: 9 },\n  Intermediate: { rows: 16, columns: 16 },\n  Expert: { rows: 16, columns: 30 }\n}\n\nconst bombsQuantity = {\n  Beginner: 10,\n  Intermediate: 40,\n  Expert: 99\n}\n\nexport class GameProvider extends React.Component {\n  state = {\n    bombs: 10,\n    bombsRemaining: 10,\n    cellsToDiscover: 71,\n    cheat: {\n      cleanBorders: false,\n      hover: false\n    },\n    columns: 9,\n    grid: [],\n    rows: 9,\n    status: gameStatus.ready,\n    selectedLevel: 'Beginner',\n    time: 0\n  }\n\n  timer = () => {}\n\n  componentDidMount = () => this.startGrid()\n\n  startGrid = async () => {\n    const { columns, rows, bombs, cheat } = this.state\n    let newGrid = utils.generateGrid(rows, columns)\n    newGrid = utils.generateBombs(\n      newGrid,\n      rows,\n      columns,\n      bombs,\n      cheat.cleanBorders\n    )\n    newGrid = utils.includeNeighborInformation(newGrid, rows, columns)\n    newGrid = utils.generateDanger(newGrid)\n    return await this.setState({ grid: newGrid })\n  }\n\n  restartGame = async () => {\n    this.stopTimer()\n\n    this.setState({\n      bombsRemaining: bombsQuantity[this.state.selectedLevel],\n      cellsToDiscover: this.state.rows * this.state.columns - this.state.bombs,\n      cheat: {\n        ...this.state.cheat,\n        cleanBorders: false\n      },\n      status: gameStatus.ready,\n      time: 0\n    })\n    return await this.startGrid()\n  }\n\n  changeLevel = selectedLevel => {\n    this.setState({ selectedLevel }, this.restartGame)\n\n    const bombs = bombsQuantity[selectedLevel]\n    const { rows, columns } = gridSize[selectedLevel]\n\n    this.setState({ bombs, columns, rows }, this.startGrid)\n  }\n\n  cellClicked = clickedCells => {\n    const { status } = this.state\n    if (status !== gameStatus.ready && status !== gameStatus.playing) return\n\n    let newGrid = this.state.grid\n    for (const cell of clickedCells) {\n      if (cell.isVisible) return\n      if (cell.hasFlag) return\n      newGrid = this.changeCellToVisible(this.state.grid, cell)\n\n      if (cell.hasBomb) {\n        this.setState({ status: gameStatus.gameover })\n        newGrid = this.clickedOnBomb(newGrid, cell)\n      } else {\n        const remainingCellsToDiscover = this.updateCellsToDiscover(newGrid)\n        this.verifyVictory(remainingCellsToDiscover)\n      }\n    }\n    if (status === gameStatus.ready) {\n      this.setState({ status: gameStatus.playing }, () => {\n        if (clickedCells.length > 1) {\n          this.startTimer()\n        } else if (!clickedCells[0].hasBomb) {\n          this.startTimer()\n        }\n      })\n    }\n\n    this.setState({ grid: newGrid })\n  }\n\n  updateCellsToDiscover = grid => {\n    let newCellsToDiscover = this.state.cellsToDiscover\n    for (const cell of grid) {\n      if (cell.isVisible) newCellsToDiscover = newCellsToDiscover - 1\n    }\n    return newCellsToDiscover\n  }\n\n  verifyVictory = cells => {\n    if (cells === 0) {\n      this.stopTimer()\n      this.setState({ status: gameStatus.victory })\n    }\n  }\n\n  changeCellToVisible = (grid, cell) => {\n    grid[cell.id] = { ...cell, isVisible: true }\n\n    // Show all the cells without danger level related to this cell.\n    if (cell.dangerLevel === 0 && !cell.hasBomb && !cell.isVisible) {\n      cell.neighbors.forEach(neighbor => {\n        this.changeCellToVisible(grid, grid[neighbor])\n      })\n    }\n\n    return grid\n  }\n\n  clickedOnBomb = (grid, clickedCell) => {\n    this.stopTimer()\n\n    grid[clickedCell.id] = {\n      ...clickedCell,\n      isVisible: true,\n      explode: true\n    }\n\n    grid = grid.map(cell => {\n      if (cell.hasBomb && !cell.explode) {\n        return { ...cell, isVisible: true }\n      }\n      return cell\n    })\n\n    return grid\n  }\n\n  toggleFlag = (clickedCell, event) => {\n    event.preventDefault()\n\n    if (clickedCell.isVisible) return\n\n    const newGrid = this.state.grid\n    const cell = newGrid[clickedCell.id]\n\n    const newBombsRemaining = cell.hasFlag\n      ? this.state.bombsRemaining + 1\n      : this.state.bombsRemaining - 1\n\n    newGrid[clickedCell.id] = {\n      ...cell,\n      hasFlag: !cell.hasFlag\n    }\n\n    this.setState({ bombsRemaining: newBombsRemaining, grid: newGrid })\n  }\n\n  setHover = (cell, isHovered) => {\n    if (!this.state.cheat.hover) return\n\n    const newGrid = this.state.grid\n    newGrid[cell.id] = { ...cell, isHovered }\n\n    cell.neighbors.forEach(neighbor => {\n      newGrid[neighbor].isHovered = isHovered\n    })\n\n    this.setState({ grid: newGrid })\n  }\n\n  cleanBorders = () => {\n    this.setState(\n      {\n        cheat: {\n          ...this.state.cheat,\n          cleanBorders: true\n        }\n      },\n      async () => {\n        await this.restartGame()\n\n        const { columns, grid, rows } = this.state\n        const cellTopLeft = grid[0]\n        const cellTopRight = grid[columns - 1]\n        const cellBottomLeft = grid[(rows - 1) * columns]\n        const cellBottomRight = grid[grid.length - 1]\n\n        this.cellClicked([\n          cellTopLeft,\n          cellTopRight,\n          cellBottomLeft,\n          cellBottomRight\n        ])\n      }\n    )\n  }\n\n  toggleCheatHover = () => {\n    const { cheat } = this.state\n    this.setState({\n      cheat: {\n        ...cheat,\n        hover: !cheat.hover\n      }\n    })\n  }\n\n  startTimer = () => {\n    this.timer = setInterval(() => {\n      this.setState({ time: this.state.time + 1 })\n    }, 1000)\n  }\n\n  stopTimer = () => {\n    clearInterval(this.timer)\n  }\n\n  render = () => {\n    return (\n      <GameContext.Provider\n        value={{\n          bombsRemaining: this.state.bombsRemaining,\n          changeLevel: this.changeLevel,\n          cellClicked: this.cellClicked,\n          cheat: this.state.cheat,\n          cleanBorders: this.cleanBorders,\n          grid: this.state.grid,\n          isGameOver: this.state.status === gameStatus.gameover,\n          isVictory: this.state.status === gameStatus.victory,\n          restartGame: this.restartGame,\n          selectedLevel: this.state.selectedLevel,\n          time: this.state.time,\n          toggleCheatHover: this.toggleCheatHover,\n          toggleFlag: this.toggleFlag,\n          setHover: this.setHover\n        }}\n      >\n        {this.props.children}\n      </GameContext.Provider>\n    )\n  }\n}\n\nexport default GameContext\n","import { css } from 'glamor'\n\nconst commonCell = {\n  alignItems: 'center',\n  backgroundColor: '#DDDDDD',\n  cursor: 'pointer',\n  display: 'flex',\n  fontWeight: 'bold',\n  height: '2rem',\n  justifyContent: 'center',\n  maxHeight: '40px',\n  maxWidth: '40px',\n  position: 'relative',\n  userSelect: 'none',\n  width: '2rem'\n}\n\nexport default {\n  cell: css({\n    ...commonCell,\n    borderTop: '2px solid #EEEEEE',\n    borderLeft: '2px solid #EEEEEE',\n    borderBottom: '2px solid #555555',\n    borderRight: '2px solid #555555',\n    ':hover': {\n      backgroundColor: '#EEEEEE'\n    }\n  }),\n  cellOver: css({\n    ...commonCell,\n    borderTop: '2px solid #EEEEEE',\n    borderLeft: '2px solid #EEEEEE',\n    borderBottom: '2px solid #555555',\n    borderRight: '2px solid #555555'\n  }),\n  cellVisible: css({\n    ...commonCell,\n    backgroundColor: '#CCCCCC',\n    borderTop: '2px solid #555555',\n    borderLeft: '2px solid #555555',\n    borderBottom: '2px solid #CCCCCC',\n    borderRight: '2px solid #CCCCCC'\n  }),\n  cellHovered: css({\n    backgroundColor: '#90FC6F'\n  }),\n  cellExploded: css({\n    ...commonCell,\n    backgroundColor: '#F76767',\n    borderTop: '2px solid #555555',\n    borderLeft: '2px solid #555555',\n    borderBottom: '2px solid #F76767',\n    borderRight: '2px solid #F76767'\n  }),\n  cellFlag: css({\n    ...commonCell,\n    borderTop: '2px solid #EEEEEE',\n    borderLeft: '2px solid #EEEEEE',\n    borderBottom: '2px solid #555555',\n    borderRight: '2px solid #555555'\n  }),\n  emoji: css({\n    color: 'red',\n    fontSize: '20px',\n    height: '1.5rem'\n  }),\n  value: css({\n    fontSize: '22px'\n  })\n}\n","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\n\nimport GameContext from '../contexts/Game'\n\nimport styles from './Cell.style'\n\nconst colors = [\n  '',\n  '#4286F4',\n  '#0BA51B',\n  '#6E25DB',\n  '#DB7325',\n  '#E22FB6',\n  '#D11F1F',\n  '#398452',\n  '#683B39'\n]\n\nconst Cell = ({ cell }) => {\n  const { isGameOver, cellClicked, toggleFlag, setHover } = useContext(\n    GameContext\n  )\n  return (\n    <td\n      className={`${styleIsFilled(cell, isGameOver)} ${styleIsHovered(cell)}`}\n      style={{ color: colors[cell.dangerLevel] }}\n      onClick={cellClicked.bind(this, [cell])}\n      onContextMenu={toggleFlag.bind(this, cell)}\n      onMouseEnter={setHover.bind(this, cell, true)}\n      onMouseLeave={setHover.bind(this, cell, false)}\n    >\n      <span\n        className={cell.hasBomb || cell.hasFlag ? styles.emoji : styles.value}\n      >\n        {renderValue(cell)}\n      </span>\n    </td>\n  )\n}\n\nconst styleIsFilled = (cell, isGameOver) => {\n  if (cell.hasFlag) return styles.cellFlag\n  if (cell.isVisible && cell.explode) return styles.cellExploded\n  if (cell.isVisible) return styles.cellVisible\n  return isGameOver ? styles.cellOver : styles.cell\n}\n\nconst styleIsHovered = cell => {\n  if (cell.isHovered) return styles.cellHovered\n}\n\nconst renderValue = cell => {\n  if (cell.hasFlag) return '🚩'\n  if (!cell.isVisible) return ''\n  if (cell.hasBomb) return '💣'\n  if (cell.dangerLevel > 0) return cell.dangerLevel\n  return ''\n}\n\nCell.propTypes = {\n  cell: PropTypes.object.isRequired\n}\n\nexport default Cell\n","import { css } from 'glamor'\n\nexport default {\n  row: css({\n    display: 'flex',\n    justifyContent: 'center'\n  })\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Cell from './Cell'\n\nimport styles from './Row.style'\n\nconst Row = ({ row }) => (\n  <tr className={styles.row}>\n    {row.map((cell, index) => (\n      <Cell key={`cell-${index}`} cell={cell} />\n    ))}\n  </tr>\n)\n\nRow.propTypes = {\n  row: PropTypes.array.isRequired\n}\n\nexport default Row\n","import { css } from 'glamor'\n\nexport default {\n  grid: css({\n    borderCollapse: 'collapse',\n    borderTop: '2px solid #555555',\n    borderLeft: '2px solid #555555',\n    borderBottom: '2px solid #EEEEEE',\n    borderRight: '2px solid #EEEEEE',\n    height: '100%'\n  })\n}\n","import React, { useContext } from 'react'\n\nimport Row from './Row'\nimport GameContext from '../contexts/Game'\n\nimport { groupBy } from '../utils'\n\nimport styles from './Grid.style'\n\nconst Grid = () => {\n  const { grid } = useContext(GameContext)\n\n  return (\n    <table className={styles.grid}>\n      <tbody>{renderGrid(grid)}</tbody>\n    </table>\n  )\n}\n\nconst renderGrid = grid => {\n  const grouped = groupBy(grid, item => item.row)\n  let html = []\n  for (const [key, row] of Object.entries(grouped)) {\n    html.push(<Row key={`row-${key}`} row={row} />)\n  }\n  return html\n}\n\nexport default Grid\n","import React from 'react'\n\nimport './Checkbox.css'\n\nconst Checkbox = ({ checked, label, onChange }) => {\n  return (\n    <label className=\"container\">\n      {label}\n      <input type=\"checkbox\" checked={checked} onChange={onChange} />\n      <span className=\"checkmark\" />\n    </label>\n  )\n}\n\nexport default Checkbox\n","import { css } from 'glamor'\n\nexport default {\n  button: css({\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    border: '1px solid #4286F4',\n    borderRadius: '5px',\n    color: '#4286F4',\n    cursor: 'pointer',\n    display: 'flex',\n    fontSize: '16px',\n    height: '30px',\n    padding: '5px',\n    ':hover': {\n      backgroundColor: '#4286F4',\n      color: '#FFFFFF'\n    },\n    ':focus': {\n      outline: 'none'\n    }\n  })\n}\n","import React from 'react'\n\nimport styles from './Button.style'\n\nconst Button = props => (\n  <button className={styles.button} {...props}>\n    {props.children}\n  </button>\n)\n\nexport default Button\n","import { css } from 'glamor'\n\nexport default {\n  menu: css({\n    display: 'flex',\n    listStyle: 'none',\n    marginBottom: '30px'\n  }),\n  listItem: css({\n    borderBottom: '2px solid #FFFFFF',\n    cursor: 'pointer',\n    marginRight: '20px',\n    padding: '10px 0'\n  }),\n  listItemActive: css({\n    borderBottom: '2px solid #CCCCCC'\n  })\n}\n","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport { css } from 'glamor'\n\nimport GameContext from '../contexts/Game'\n\nimport styles from './Menu.style'\n\nconst Menu = () => {\n  const { changeLevel, selectedLevel } = useContext(GameContext)\n\n  return (\n    <ul className={styles.menu}>\n      {['Beginner', 'Intermediate', 'Expert'].map(level => (\n        <ListItem\n          action={changeLevel}\n          key={level}\n          level={level}\n          selectedLevel={selectedLevel}\n        />\n      ))}\n    </ul>\n  )\n}\n\nconst ListItem = ({ action, level, selectedLevel }) => (\n  <li\n    {...css(\n      styles.listItem,\n      level === selectedLevel ? styles.listItemActive : ''\n    )}\n    onClick={action.bind(this, level)}\n  >\n    {level}\n  </li>\n)\n\nListItem.propTypes = {\n  action: PropTypes.func.isRequired,\n  level: PropTypes.string.isRequired,\n  selectedLevel: PropTypes.string.isRequired\n}\n\nexport default Menu\n","import { css } from 'glamor'\n\nexport default {\n  container: css({\n    marginRight: '50px'\n  }),\n  wrapper: css({\n    marginBottom: '30px'\n  }),\n  info: css({\n    color: '#4286F4',\n    fontSize: '20px',\n    fontWeight: 'bold'\n  }),\n  button: css({\n    backgroundColor: '#FFFFFF',\n    border: '1px solid #AAAAAA',\n    borderRadius: '5px',\n    color: '#AAAAAA',\n    cursor: 'pointer',\n    fontSize: '16px',\n    height: '30px',\n    padding: '5px',\n    ':hover': {\n      backgroundColor: '#AAAAAA',\n      color: '#FFFFFF'\n    },\n    ':focus': {\n      outline: 'none'\n    }\n  }),\n  victory: css({\n    color: '#4286F4',\n    fontSize: '20px',\n    fontWeight: 'bold',\n    marginTop: '30px'\n  }),\n  cheatArea: css({\n    border: '1px solid #BBBBBB',\n    marginTop: '30px',\n    padding: '10px',\n    '> h1': {\n      color: '#555555',\n      fontSize: '20px',\n      marginBottom: '10px'\n    }\n  })\n}\n","import React, { useContext } from 'react'\n\nimport Checkbox from './common/Checkbox'\nimport Button from './common/Button'\nimport Menu from './Menu'\nimport GameContext from '../contexts/Game'\n\nimport styles from './Information.style'\n\nconst Information = () => {\n  const {\n    bombsRemaining,\n    cheat,\n    cleanBorders,\n    isVictory,\n    restartGame,\n    time,\n    toggleCheatHover\n  } = useContext(GameContext)\n\n  return (\n    <div className={styles.container}>\n      <Menu />\n\n      <div className={styles.wrapper}>\n        <div className={styles.container}>\n          <p>\n            Bombs remaining:{' '}\n            <span className={styles.info}>{bombsRemaining}</span>\n          </p>\n          <p>\n            Time: <span className={styles.info}>{time}</span>\n          </p>\n        </div>\n      </div>\n\n      <Button onClick={restartGame}>Restart</Button>\n\n      <div className={styles.victory}>{isVictory ? 'Victory :)' : ''}</div>\n\n      <div className={styles.cheatArea}>\n        <h1>Cheat area</h1>\n        <Checkbox\n          checked={cheat.hover}\n          label=\"Show hover\"\n          onChange={toggleCheatHover}\n        />\n        <Button onClick={cleanBorders}>Start with clean borders</Button>\n      </div>\n    </div>\n  )\n}\n\nexport default Information\n","import { css } from 'glamor'\n\nexport default {\n  app: css({\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: '100px'\n  })\n}\n","import React from 'react'\nimport Grid from './Grid'\nimport Information from './Information'\nimport { GameProvider } from '../contexts/Game'\n\nimport styles from './App.style.js'\n\nconst App = () => (\n  <div className={styles.app}>\n    <GameProvider>\n      <Information />\n      <Grid />\n    </GameProvider>\n  </div>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}